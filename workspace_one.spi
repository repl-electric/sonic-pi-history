["experiments"].each{|f| require "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}"}
bar = 4.0
define :pat do |s, p, delta=0, *args|
 sync :drum_hit
 case p
   when  "x" #hit
    sleep(delta) if delta != 0
    sample *([s]+args)
   when  "r" #random
    sleep(delta) if delta != 0
    sample *([s]+args) if dice(6) > 3
  end
end
define :drum_loop do |name, state, sample, *args|
  state = expand_pattern(state)
  live_loop name, auto_cue: false do  
     pat(sample.is_a?(SonicPi::Core::RingVector) ? sample.tick("#{name}_sample".to_sym) : sample, state.tick(name), 
         delta=(args[0][:delta] || 0),
         *[args[0].reduce({}){|a,(k,v)|
     v.is_a?(SonicPi::Core::RingVector) ? a[k]=v.tick("#{name}_#{k}".to_sym) : a[k]=v
     a}])
  end
end
define :expand_pattern do |pat|
  pat.to_a.map{|slice| 
  case slice
  when "-*16"
    ("-"*16).split("")
  else
    slice
  end
  }.flatten.ring
end

live_loop(:drum_timing_loop, auto_cue: false){
  #sync :next
  density(2){
    16.times{ cue :drum_hit
              sleep (bar/16.0)}}}


drum_loop(:fast,   (ring *%w{x - - -  - - - - - - -  _ _ _ _}), Heat[/f#/i,8], amp: 1.0)
drum_loop(:fast2,  (ring *%w{- - - -  - - - x - - -  _ _ _ _}), Heat[/clap/i,6], amp: 1.0)
drum_loop(:fast3,  (ring *%w{x - - -  - - - x - - -  - - - -}), Heat[/kick/i,5], amp: 1.0)
drum_loop(:fast4,  (ring *%w{- - - -  - - - x - - -  - - - -}), Heat[/a#/i,8], amp: 1.0)