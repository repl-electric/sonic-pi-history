bar = 1.0

soft_noise = [6,7,8,9, 10,12,13,14, 21,27]

live_loop :crackels do
# sample Ambi[/crackle/i,0]

# sample Ether[/noise/i][6..9].tick
# sample Ether[/noise/i][10..14].tick
#n = 5
n=7
debut,fin = 0.0, 0.1
lib = Mountain
pan = -0.25
pan_inc = 0.01

sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/4.0
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/4.0
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/4.0

sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/2.0 
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep  bar/8.0 +  bar/8.0
#

sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/4.0
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/4.0
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/4.0


sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/8.0
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc

sleep bar/2.0

sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
sleep bar/8.0
sample lib[/microperc/i][n], start: debut, finish: fin, pan: pan+=pan_inc
end

live_loop :tin do
 sync :crackels
 #sample Mountain[/kick/i,7]
 12.times{
 sleep bar/4.0
# sample (knit Mountain[/stick/i,4], 4, nil,2).tick, amp: 0
}
end

def run(s, bar, pat, rate = (ring 1.0), amp = (ring 1.0))
pat.length.times do
 p = (ring *pat.split("\s"))
 sleep bar/4.0
 if p.hook == "x"
  sample s, amp: amp.tick(:am), rate: rate.tick(:rate)
 end
 p.tick
end
end

live_loop :tin2 do; sync :crackels; run Mountain[/microperc/i,6],bar, "x x x x x x x x x x x x x x x x" ;end
live_loop :tin3 do; sync :crackels; run Mountain[/impact/i,1],bar,    "- - - - - x - - - - - - - - x -", (ring -1.0), (ring 0.2, 1.0) ;end