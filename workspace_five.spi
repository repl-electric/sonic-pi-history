beat = 1/2.0

def degrees_seq(pattern, root, s=nil)
  if !s
    s = /[[:upper:]]/.match(root.to_s[0]) ? :major : :minor
  end
  pattern.to_s.split("").map{|d| degree(d.to_i, root, s)}
end

wood_s = "/Users/josephwilk/Dropbox/repl-electric/samples/Analog\ Snares\ \&\ Claps/17\ \ EMT140\ \(1\).wav"

live :drums do |n|
  cue :hit
  cue :half_hit
  #sample clap_s, rate: 0.1, amp: 0.25
#  with_fx(:lpf, cutoff: 40){
 # sample kick_s, amp: ((n%4==0) ? 2.7 : 2.5), rate: ((n%4==0) ? 0.7 : 1.0),
  #               start: ((n%4==0) ? 0 : 0.05)}

  sleep beat/2
  cue :half_hit
  sleep beat/2
  cue :half_hit
  sleep beat/4
  cue :half_hit

  sleep beat/4
  cue :half_hit

  sleep beat/2
  n+=1
end
end

live :pulse3, amp: 1.0 do |p_inc|
 sleep beat/2.0
 with_synth :hollow do
   sample wood_s, amp: 0.02
   play (ring *degrees_seq(1113111311131114, :Cs3))[p_inc], attack: 0.01, release: beat/2, amp: 4.00
   with_synth :growl do
     play (ring *degrees_seq(1113111311131114, :Cs5))[p_inc], attack: 0.001, release: beat/2, amp: 4.00
   end
   sleep beat/4
 end
 p_inc+=1
end


live :hollowed, amp: 1.0 do
  hollowed_synth degree(1, :Cs3, :major)
  sleep beat
end

set_volume! 1.0