#sop_on :A4, 20, sustain: 12, mode: -1
#midi_cc 1, 0,  port: :iac_bus_1, channel: 10
#sop_mode 0
#musicbox :A3, sustain: 1
#set_volume! 2.0
set_volume! 0.5
#sop_cc 1, 0
#sop_off :A4

live_loop(:metro)do
  tick;
  cue("16") if look % 16.0 == 0.0
  cue("24") if look % 24.0 == 0.0
  cue("18") if look % 18.0 == 0.0
  cue("32") if look % 32.0 == 0.0
  cue("64") if look % 64.0 == 0.0
#  midi_start if tick == 0
#  midi_clock_beat 1.0, port: :iac_bus_1
  sleep 1.0
end

live_loop :moving, sync: :metro do
  #stop
  sync :music

  mega =
    (ring
    (ring #1/4     1/4.0
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],   #1/4
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],   #1/4
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],
      )
    )

  sleep 3/4.0
  score = mega.tick(:mega)

  midi_cc 65,  127*1  # port
  midi_cc 114, 1

  midi_cc 5, (ring 2,4).tick(:inside), port: :iac_bus_1, channel: 9
  puts "---------------------"
  score.count.times{ #-Every 8 switch
    tick
    s2 = ""
      #zero s2=(knit :D2,24,:Fs2,24,:Gs2,24).look,5 #might not get played.
      s = score.look
      #puts "#{s2}/#{s}"
      zero s,(line 100,0,9).look*0.5 if s && s[0]
      #zero_cc 1, (ine 1, 127,).look

      #zero s,(ring 120,20,20,20).look if s && s[0]
      #midi_pitch_bend 0.5, port: :iac_bus_1, channel: 9
      #puts score.map{|z| z[-1] }.reduce(:+) + 3/4.0
      sleep s[-1]
  }
end

live_loop :fucj, sync: :metro do
  tick
 # midi_cc 1, ((line 0,127,127)+(line 127,0,127)).look,  port: :iac_bus_1, channel: 10
  sop_cc 1, 1
  sleep 1/2.0
end


live_loop :pi, sync: :metro do
  tick
score = (ing
    [:Cs3, 0.25],  [:A3, 0.125],   [:FS3,  0.125],
    [:Cs3, 0.25],  [:A3, 0.125],   [:FS3,  0.125],
    [:Cs3, 0.25],  [:A3, 0.125],   [:FS3,  0.125],

    [:D3,  0.25],  [:A3, 0.125],   [:Fs3, 0.125],
    [:D3,  0.25],  [:A3, 0.125],   [:Fs3, 0.125],
    [:D3,  0.25],  [:A3, 0.125],   [:Fs3, 0.125],
    )
  z = score.look
  with_transpose 12 do
    midi z[0], (ring 80,70,65).look, port: :iac_bus_1, channel: 14
  end
  sleep 1
end


live_loop :music, sync: :metro do
  tick
  #sync "16"
  harp_cc phase: 0.5,  mod: 0.0, cutoff: 1.0, bass: 0.2 #(ramp 0.0, 0.85,128/8.0).tick(:firey), bass: 0.0

  score = (ing
    [:A3,6],

#,    [:E3,  0.125],  [:B2, 0.125],   [:Gs3, 0.125],
#,    [:E3,  0.125],  [:B2, 0.125],   [:Gs3, 0.125],
#,    [:Fs3,  0.25],  [:Cs3, 0.125],   [:A3, 0.125],

    #,    [:Fs3,  0.25],  [:Cs3, 0.125],   [:A3, 0.125],
#,    [:Fs3,  0.25],  [:Cs3, 0.125],   [:A3, 0.125],

    )

  comment do
  zero (ing
        [:Cs3, 6], #,  [:E3, 3],   [:Cs3, 3], [:B2, 3],
        [:Cs3, 3], #,  [:E3, 3],   [:Ds3, 3], [:B2, 3],
        [:D3, 3], #,  [:Fs3, 3],  [:Cs3, 3], [:B2, 3],

        [:Cs3, 6], #,  [:E3, 3],   [:Cs3, 3], [:B2, 3],
        [:Cs3, 3], #,  [:E3, 3],   [:Ds3, 3], [:B2, 3],
        [:D3, 3], #,  [:Gs3, 3],  [:Cs3, 3], [:B2, 3],
        ).look
  end

  harp z=score.look[0], 1*(ring 30,20,20).look, sustain: score.look[-1]*2

  #bass :E2, sustain: 3
  #bass (ring :E2, :D2, :Fs2).look, sustain: 2.5, cutoff: 0.25
  3.times{
    sleep score.look.flatten[-1]/(3.0);
    #harp_cc phase: 1*(ring 0.5, 0.5 + rand*0.05).tick(:inits)
  }
end


with_fx :none, mix: 0 do
  live_loop :pat, sync: :metro do
    stop
    #sync '18'
    tick
    #sync "16"
    c1 = Dust[/clap/,1]
    k2,k1,k3 = Frag[/kick/,9], Mountain[/subkick/,0], (knit Dust[/kick/,24],3, Dust[/kick/,25],3).look
    k4 = Frag[/kick/,3]
    puts k4
    s=(ring *%W{
     k2 _ _ _   k1 _ _ _   k2 _ _ _   k1 _ _ _
     k2 _ _ _   k1 _ _ _   k2 _ _ _   k1 _ _ _
     k2 _ _ _   k1 _ _ _   k2 _ _ _   k1 _ _ _

     k2 _ k2 _  k1 _ _ _   k2 _ _ _   k1 _ _ _
     k2 _ _ _   k4  _ k2 _
  }).look

    s1=(ring *%W{
     k2 _ _ _   _ _ _ _   k1 _ _ _
     _ _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   k1 _ _ _
     _ _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _  _ _ _ _   k1 _ _ _
     _ _ _ _   _ _ _ _   Frag[/kick/,3] _ k2 _
  }).look

    s2=(ring *%W{
     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   Frag[/kick/,3] _ k2 _
  }).look

    sidechain if eval(s) && spread(1,4).look
    smp eval(s), amp: 3*(knit 0.8,4, 0.6,4, 0.7,4, 0.6,4).look , v: 0.2, attack: (knit 0.0,12, 0.02,4, 0.0,8).look, cutoff: 100
    if s!="_" && spread(1,8+4).look
      if spread(1,32).look
        at do
          smp Analog[/17 /].tick(:echo), amp: 0.5
          sleep 0.25
          smp Analog[/17 /].tick(:echo), amp: 0.3
        end
      else
        smp Analog[/17 /].tick(:echo), amp: 0.5
      end
    end

    p=Dust[/perc/, /conga/] #MagicDust[/perc/,/stone/,[4..8]].look #*Dust[/perc/, [7,7]]
#    p= Dust[/perc/, [7,7]]
    #p=MagicDust[/perc/,/stone/,[4..8]].look
    #p=Analog[/click/].look
    #  puts p
    s=(ring *%W{
p _ _ _   _ _ p _
_ _ p _
_ _ _ _   _ _ p _
_ _ p _

p _ _ _   _ _ p _
_ _ p _
_ _ _ _   _ _ p _
_ _ p _
}).look

    s1=(ring *%W{
p _
p _ _ _
_ p _ _
_ _ p _
_ _ _ p
_ _ p
_ _ p
}).look

  if(s=="_")
    # zero (knit :A2,24,:E3,24).look,5
#    zero (ring :A3,1,:E3,1,:A3,1    ).look,5
  end
    with_fx :none, mix: (line 0.2,0.3,32).look do
      if s!= "_" && spread(1,6).look
       #smp MagicDust[:clack, [0,2,3,6]].tick(:insider), amp: 0.5*1, pan: (ring 0.25,-0.25).look(:inside)
      end
      #sidechain if eval(s)
      smp eval(s), cutoff: (line 110, 115, 6*4).look, attack: (line 0.02, 0.0,6*2).look, amp: 2.8*(line 1.0,0.9,6*8).look, rate: (knit 1,(6*4)-4, 0.85,4, 1,(6*4)-4, 0.75,4).look
    end
    c = MagicDust[/HI_/, [54,55,56,57]].look
    if (s=(ring *%W{
_ _ _  _ _ _
c _ _  _ _ _
_ _ _  _ _ _
_ _ _  _ _ _
}).look) != _
      smp eval(s), pan: (ring 0.25,-0.25).look
    end

    c1 =  (knit Analog[/clapraw/].look,8,Analog[/clap1/].look,8,Analog[/clap2/].look,8,Analog[/clap3/].look,16).look
    c2 =  (knit Analog[/clap/,15],16, Analog[/clap/,16],16, Analog[/clap/,17],16).look
    t1 =  Analog[/click/].look

  s=(ring *%W{
 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _
 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _

 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _
 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _
}).look

    smp eval(s), amp: 1.25, cutoff: (ine 127, 110, 1024,).look

 # = spread(7,11).map{|s| s ? :hit : :miss}
  s=(ring *%W{_ _ _ _   c1 _ _ _}).look
  #smp eval(s), cutoff: (line 80, 120, 128).look

    h,h1,h2 = MagicDust[/_HI/,18], Dust[/hat/,6], Dust[/hat/, 6]
    #h = Dust[/hat/,7]

  s=(ring *%W{
h _ h _  _ _ h _
_ _ h _  _ _ h _
h _ h _  _ _ h {path:h,amp:0.3}
_ _ h _  _ _ h _

}).look
    amp = if ((v=eval(s)) != _)
            v.is_a?(String) ? 0.5 : (v[:amp] || 0.5)
          else
            0
          end
    smp eval(s), cutoff: 1*(line 110, 127,32).look,
    attack: (line 0.001,0.0,64).look,
    sustain: (knit 0.1,4,0.1,4,1.1,4).look, amp: amp*2
    #sustain: (knit 0.1,4,0.0125,16,0.5,4).look, amp: amp
    sleep 1/8.0
  end
end
live_loop :bells, sync: :metro do
  stop
  tick
  # h,h2 = MagicDust[/MD_BELL_RES/,5],Frag[/hat/,7]
  #  smp MagicDust[/hi/,/chimes/,/_A\./].look, amp: 0.5
  sleep 32
end

live_loop :vocals, sync: :metro do
  tick
  stop
  with_fx :gverb, room: 400, mix: (ring 0,0,0,1.0).look, room_slide: 0.5, decay: 8.0 do
    with_fx :gverb, room: 600, mix: (ring 0,0,0,1.0).look, room_slide: 0.5, decay: 8.0 do |g_fx|
      hz1,hz2 = (knit @slices["A3/4"][1],2).look, @slices["B3/4"][1]
      puts hz2
    hat2 = (ring *%w{_ _ hz1 _
                     _ _ hz1 {path:hz2,amp:0.25}
                     _ _ hz1 _
                     _ _ hz1 _})
     smp eval(hat2.look), amp: 1, rate: [-1,1].choose, attack: 0.125
      if spread(1,12).look
        #sop :B2, 30, sustain: 12
        #sop_cc 1, (ring 30, 40, 50).look
      end
      #midi_cc 1, (line 0,80,32).look,  port: :iac_bus_1, channel: 10

      8.times{sleep 1/4.0;
        #control g_fx, room: rand_i(800)
        #sop_cc 1, (ring 30,40,50,60,70).look

#        midi_pitch_bend 127, port: :iac_bus_1, channel: 10
        #        midi_cc 1, (line 0,80,32).look,  port: :iac_bus_1, channel: 10
      }
    end
  end
end
