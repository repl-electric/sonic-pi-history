["support", "soprano", "samples"].each{|f| require "/Users/josephwilk/Workspace/repl-electric/sonic-pi/lib/#{f}"}

DEGREES = {:i    => 0,
               :ii   => 1,
               :iii  => 2,
               :iv   => 3,
               :v    => 4,
               :vi   => 5,
               :vii  => 6,
               :viii => 7,
               :ix   => 8,
               :x    => 9,
               :xi   => 10,
               :xii  => 11}

def resolve_degree_index(degree)
  if idx = DEGREES[degree]
      return idx
    elsif degree.is_a? Numeric
      return degree - 1
   else
        raise InvalidDegreeError, "Invalid scale degree #{degree.inspect}, expecting #{DEGREES.keys.join ','} or a number"
   end
end

def degree(degree, tonic, scale)
  scale = SonicPi::Scale.new(tonic, scale)
  index = resolve_degree_index(degree)
  scale.notes[index]
end


bar = 1.0/1.0
live :timer do
  cue :circle
  sleep bar
  sleep bar
end

live :drummer do |n|
  use_synth :beep
  #use_synth_defaults attack: 0.1, release: 0.03
  with_fx :reverb do
  sync :circle
  if n%16 == 15
      play degree(2, :A1, :major)
      sleep bar
      sleep bar
  elsif n%16 == 0
    play degree(2, :A1, :major)
    sleep bar
    play degree(2, :A1, :major)
    sleep bar
    else
    play degree(1, :A1, :major)
    sleep bar
    play degree(4, :A1, :major)
    sleep bar
  end
  end

end

live :beeping do
    use_synth :beep
#    with_fx :lpf, cutoff: 120, _slide: 5 do
    with_fx :echo, phase: bar/4.0 do
     with_fx :reverb do
        sync :circle
        play degree(1, :A3, :major)
        sleep bar/2.0
        play degree(3, :A3, :major)
        sleep bar/2.0

        play degree(1, :A3, :major)
        sleep bar/2.0
        play degree(4, :A3, :major)
        sleep bar/2.0
      end
    end
 # end
end