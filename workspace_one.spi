["experiments", "drums"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}.rb"}
bar = 4.0
live_loop(:drum_timing_loop, auto_cue: false){sync :next;density(2){ 16.times{ cue :drum_hit; sleep (bar/16.0)}}}

def ring_gen(n, fn)
  (ring *((0..n).map{fn.()}))
end

with_fx(:level, amp: 0.5) do
                           #1 2 3 4 5 6 7 8
drum_loop(:bang,  (ring *%w{x - - - - - - -  -*8 -*8 -*8}), Mountain["subkick",4], amp: ring_gen(32, lambda{1.0 + rrand(0.0,0.2)}), 
                                                                                   rate: ring_gen(32, lambda{rrand(0.9,1.0)}))
                           #1 2 3 4 5 6 7 8
drum_loop(:bang2, (ring *%w{-*8 -*8
                            x - - - - - - -   -*8}), Mountain["subkick",0], amp: ring_gen(32, lambda{1.0 + rrand(0.0,0.2)}), 
                                                                           rate: ring_gen(32, lambda{rrand(0.9,1.0)}))
drum_loop(:snare, (ring *%w{- - - - - - - - 
                            x - - - - - - -    
                            - - - - - - - - 
                            x - - - - - - -    
                            - - - - - - - - 
                            x - - - - - - -   
                            - - - - - - - - 
                            x - - - - - - -}), Ambi[/clap/,13],        amp: 0.05, delta: 0.001, start: 0.0, rate: 1.0)
drum_loop(:swipe,  (ring *%w{- - - - - - - - - - - - x - - -    - - - - - - - - - - - - - - - -    - - - - - - - - - - - - x - - -    - - - - - - - - - - - - - - r -}),  Ether[/snare/i,12], delta: 0.01, amp: 0.1*(knit 0.5,24, 1.9,8).tick(:amp), start: 0.0, rate: (knit -0.8,16, -1.5,16).tick(:rate))
end


drum_loop(:hat,  (ring *%w{x - - - - - - - }), Mountain["microperc",6..8], amp: ring_gen(32, lambda{1.0 + rrand(0.0,0.2)}), 
                                                                                   rate: ring_gen(32, lambda{rrand(0.9,1.0)}))