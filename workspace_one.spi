["experiments", "drums"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}.rb"}
bar = 4.0
live_loop(:drum_timing_loop, auto_cue: false){sync :next;density(2){ 16.times{ cue :drum_hit; sleep (bar/16.0)}}}

def ring_gen(n, fn)
  (ring *((0..n).map{fn.()}))
end


drum_loop(:bang,  (ring *%w{x - - - - - - - 
                            - - - - - - - -
                            x - - - - - - -
                            - - - - - - - -}), Mountain["subkick",0], amp: ring_gen(32, lambda{3.0 + rrand(0.0,0.2)}), rate: ring_gen(32, lambda{rrand(0.9,1.0)}))


drum_loop(:bang2,  (ring *%w{x - - - - - - - 
                             - - - - - - - -
                             - - - - - - - -
                             - - - - - - - -}), Mountain["subkick",1], amp: ring_gen(32, lambda{1.0 + rrand(0.0,0.2)}), rate: ring_gen(32, lambda{rrand(0.9,1.0)}))



drum_loop(:hat,  (ring *%w{x - - - - - - - 
                           - - - - - - - - 
                           x - - - - - - -
                           - - - - - - - -
}), Ether["click",1], amp: ring_gen(32, lambda{1.0 + rrand(0.0,0.2)}), rate: ring_gen(32, lambda{rrand(0.9,1.0)}))

drum_loop(:hat2,  (ring *%w{- - - - - - - - 
                            x - - - - - - - 
                            - - - - - - - -
                            x - - - - - - -
}), Ether["clap",3..4], amp: ring_gen(32, lambda{1.0 + rrand(0.0,0.2)}), rate: ring_gen(32, lambda{rrand(0.9,1.0)}))


drum_loop(:perc3,  (ring *%w{x - - - - - - -}), Ambi[/hat/i,3], amp: 1.0, rate: 1.0, )
drum_loop(:perc4,  (ring *%w{
- - - - - - - -
- - - - - - - -
- - - - - - - -
- - - - - x - -
}), Ambi[/hat/i,17], amp: 6.0, rate: 1.0)



drum_loop(:perc,  (ring *%w{- - - - - - - - 
                            - - - - - - - -
                            - - - - - - - -
                            - - - - - - x -}), Ether[/f#/i], amp: 0.5, rate: 1.0)

#sample Ether[/.*/i,0]
#sample Ether[/f#/i,0]
#sample Ether[/f#/i,8]