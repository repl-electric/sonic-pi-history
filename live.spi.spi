load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/monkey.rb"


live_loop :metro do
  tick
  sleep 1
end

live_loop :melo, sync: :metro do

  tick
  score = (knit
    [:A2, 3/4.0],3, [_,1],3, [_,2/4.0],3,
    [_,3/4.0],1, [_,1],1, [_,2/4.0],1)
  cue(:m) if (look % (score.count-1)) == 0
  3.times{
 #   harp s=score.tick, (ring 20,20,20, 30,40,40, 40,60,80).look
   # sleep s[-1]
  }
  sleep 3/4.0
end

#sharp_cc(cutoff: 0.8)
#harp_cc(phase: 0.5)


def smp(*args)
  begin
    sample_thing = args.first
    if sample_thing
      smp_name = if sample_thing.is_a?(Hash)
                   sample_file = sample_thing[:path]
                   if sample_thing[:onset] && sample_thing[:offset]
                     start = ratio_on(sample_thing) + (args.last[:start_offset] || 0)
                     fini = ratio_off(sample_thing) + (args.last[:finish_offset] || 0)
                   else
                     start = 0
                     fini = 1
                   end
                   options = {start: start, finish: fini}
                   options = if sample_thing.keys.length > 1
                               options.merge(args.last)
                             else
                               options
                             end
                   sample sample_file, *[options]
                   sample_file
                 else
                   sample(*args)
                   sample_thing
                 end
      if smp_name =~ /kick/i
        dshader :decay, :iBeat, ((args[-1] && args[-1].is_a?(Hash) && args[-1][:v]) ? args[-1][:v] : 0.3), 0.005
      end
    end
  rescue
    puts $!
  end
end


live_loop :kick, sync: :metro do
  tick
  #sync :m
  k1,k2=Frag[/kick/,8],Mountain[/subkick/,0]
  if(s=(ring *%W{k2 _ k1 _   _ _ _ _   k1 _ _ _   _ _ _ _
                 k1 _ _ _    _ _ _ _}).look) != _
   # puts eval(s)
    smp eval(s)
  end

  sleep 1/8.0
end

live_loop :bass, sync: :metro do
  stop
  #sync :m
  tick
  bass (ring [:A2,3]).look, 100, sustain: 3, cutoff: 0.25
  sleep 6
end

live_loop :back, sync: :metro do
  stop
  tick
  #shader :iMode, 0
    dshader :iMode, (ring 1.0, 2.0,3.0).look
    dshader [:iR,:iG,:iB].choose, rand*4
  #sharp (ring [:A3, 12], [:CS4, 12], [:E4, 12], [_, 12], [_,12]).look,10, sustain: 6
  #dshader [:iR,:iB,:iG], rand
  sleep 12
end
