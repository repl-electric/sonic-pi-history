#camlogo logo: 1.0, crazy: 1.0, off: 1.0
#null :e2
#bitsea_on :cs4
bitsea_cc motion: 0.10  #╟▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
bitsea_cc octave: 0.56  #╟▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
#bitsea_cc formant: 0.00 #╟▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
invcol 0.0
#shard 0.8
electric
focus

#zero_on :cs5
zero_cc pulse: 0.50
zero_cc more:  0.30
zero_cc noise: 0.00
zero_cc wet:   0.80
#zero_cc amp: 0.50

live_loop :playing_piano_through_a_keyhole, sync: :hit do;tick
  live_loop :fall_into_your_screen {stop}
  dcam3
  with_bpm 63.5 do #63.5
    score=(ing
      D4 Cs4 _ A3 _ E4 _ A4 A4 A4 A4 A4
      D4 Cs4 _ A3 _ B3 _ A4 A4 A4 Fs4 A4
      )
    shard 0.4
    note=score.look
    future_note=score.look(offset: 1)
    operator note
    callstack note,(ing 70 65 60).look, sus: 2
#    zero_x

    sleep 1/2.0

    chd = find_chord(future_note)
    if spread(1,2).rot(1).look
      with_transpose 0 { zero chd[1], 1, sus: 12 }
      with_transpose -12 { zero chd[2], 1, sus: 12 }
      with_transpose -24 { zero chd[0], 1, sus: 12 }
    else

    end


    sleep 1/2.0
    sleep 1/4.0
  end
end



live_loop :fall_into_your_screen, sync: :unsyncable do; tick
  stop
  score=(ing
    [:b3 :d5 :fs3] Zz
    [:fs3 :a4 :cs4] Zz
    ).look
  score.each_tick(:in){|n|
    qbitsea n, 1.0*(ing 80 70 85 70).look(:in), mode: 0, cutoff: 1.0, sus: 2.5
  }

  if score.length > 1
    exception root(score), sus: 2
  end
  #logo [1,2,3,4,5].choose
  #corrupt :a1, motion: 0.3
  sleep 1
  null root(score)
  sleep 1
end
live_loop :by_the_light_of_the_terminal, sync: :unsyncable do
  stop
  with_fx :echo, mix: (ring 0.025+rand*0.1,0.055+rand*0.1,0.03,0.02,0.01).look, phase: (ring 1/4.0, 1/8.0).look do
    8.times{
      tick
      pp=(ing
        _ _ _ _    _ _ _ _    _ _ _ _   _ _ _ _
        _ _ _ _    _ _ D1 _    _ _ _ _   _ _ _ _

        ).look
      smp_dust(pp)
      if pp
        dterrain 0.5*rand
      end
      mt mt_pat.look.look, accent=(line 75, 85, 16*4).look, 127
      mt_cc morph: ((line 0.0, 1.1,16*16*2)+(line 1.1, 0.0, 16*16*2)).look
      s=(ing
        2 _ _ _  5 _ _ _    5 _ _ _      _ _ _ _
        5 _ _ _   _ _ _ _   5 _ [2] 3    _ [5] 5 5
        ).look
      mt s, accent=(line 75, 85, 16*4).look, 127
      s=strpat("[5]p5p5p5p 5p5p5[5]5p")
      #mt s.look,accent=(line 85,127,64).look, 120
      sleep 1/8.0
    }
  end
end
live_loop :its_all_just_text_in_a_file, sync: :unsyncable do; tick
stop
  kick_machine k=(ing
    [KT[1]] _ _ _  TS[8] _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _

    K1    _ _ _  TS[8] _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _
    ).map{|c| look % 32 == 0 ? c : c}.look, def: 8, accent: 2

  yes{
    if k && spread(1,64).rot(0).look
      bitsea :fs4, sus: 4.0
      cue :hit
    end
  }

  p=(ing
    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    [TS[49]] _ _ TS[12]    _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TS[7] _ _ _            _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TT[49] _ _ TS[12]      _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TS[7] _ _ _            _ _ _ _
    )

  p=p.look
  #p=_
  fx=:lpf
  accent = (ing 0.2 0.2 0.3 0.5).look
  attack = 0.0
  r = 1.0
  if p && p.is_a?(Array)
    p = p[0]
    accent=accent*1.5
  end
  if p
    with_swing(0.01) do
      with_fx(fx, phase: (ring 1/4.0,1/4.0,1/8.0).look){
        at{
          sleep 0.5
          viz :sea, height: 0.3
          viz :sea, noise: 10.0
          sleep 0.125
          dviz :sea, height: 0
          viz :sea, noise: 0.01
        }
        smp p, amp: 3*accent, rate: r, attack: attack
      }
    end
  end

  sleep 1/8.0
end
live_loop(:unsyncable) do; sleep 1.0 end
