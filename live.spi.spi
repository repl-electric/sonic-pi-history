load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/monkey.rb"


live_loop :metro do
  tick
  sleep 1
end

live_loop :melo, sync: :metro do
  tick

  score = (knit
    [:A3, 3/4.0],3, [:D3,1],3, [:E3,2/4.0],3,
    [:Fs3,3/4.0],1, [:A3,1],1, [:D3,2/4.0],1,
    [:A3 ,3/4.0],1, [:D3,1],1, [:E3,2/4.0],1,
    [:E3, 3/4.0],1, [:Fs3,1],1,[:D3,2/4.0], 1,
    [_,   3/4.0],1, [:A2,1],1, [:B2,2/4.0 + (3-3/4.0) - 0.25],1,  #6  #+ 3/4.0 + 1 + 2/4.0

    )
  cue(:m) if (look % (score.count-1)) == 0
  3.times{
    dshader :iMode, 1
    dshader [:iR,:iG,:iB].choose, rand*4
    harp s=score.tick, 0*(ring 20,20,20, 30,40,40, 40,60,80).look
    #zero s[0]

    if(spread 1,6).look
      sharp s
    end

    sleep s[-1]
  }
  sleep 3/4.0
end


live_loop :kick, sync: :metro do
  tick
  #sync :m
  k1,k2=Frag[/kick/,9],Mountain[/subkick/,0]
  if(s=(ring *%W{k2 _ {path:k1,amp:0.4} _   _ _ _ _   k1 _ _ _   _ _ _ _
                 k2 _ _ _    _ _ _ _    k1 _ _ _    _ _ _ _
                 k2 _ _ _    _ _ _ _    k1 _ _ _    _ _ _ _
}).look) != _
   # puts eval(s)
    smp eval(s)
  end

  sleep 1/8.0
end

live_loop :thing, sync: :metro do
  tick
  #sync :m
  #smp Corrupt[/loop/,/beat/,/120/,6], slice: (ring *1..12).look, amp: 2
  sleep 1/8.0
end

live_loop :bass, sync: :metro do
  stop
  #sync :m
  tick

#  [:E2,3], [:D2,3],[:B1,3],
 # [:FS2,3],
#  [:A2,3],
#  [:Gs2,1],
#  [:D2,3],
#  [:Cs2,2],
#  [:B1,1],
#  [_,1.0], #ODD timing

  bass (ring [:E2,3], [:D2, 3], [:B1,3] ).look, 100, sustain: 3, cutoff: 0.25
  sleep 6
end

live_loop :back, sync: :metro do
  #stop
  tick
  #shader :iMode, 0
    dshader :iMode, (ring 1.0, 2.0,3.0).look
    dshader [:iR,:iG,:iB].choose, rand*4
  #sharp (ring [:A3, 12], [:CS4, 12], [:E4, 12], [_, 12], [_,12]).look,10, sustain: 6
  #dshader [:iR,:iB,:iG], rand
  sleep 12
end
