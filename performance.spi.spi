#flip :F3, 1*(ing 50 60 70 110).look, sus: 1.0#/2.0
        sleep 1/4.0
        #flop :E3, 1*(ing 50 60 70 110).look, sus: 2.0#/2.0
        #flop :D4, 2*(ing 50 60 70 110).look, sus: 1.0/8.0
        #glitch :ds3,2# if spread(1,4).look
        sleep 1/4.0
      else
#        midi :a4, 100, channel: 16, sus: 2
        #flop :d3, 2*(ing 50 60 70 110).look, sus: 1.0/2.0
        #flop :E4, 50, sus: 1.0 #KEEP
        sleep 1/4.0
        #glitch :as3,1# if spread(1,4).look
        sleep 1/4.0
        #glitch :as3,5# if spread(1,4).look
      end

      #flip (knit :A5, 4 ,:F5,4, :E5,8).look, (ing 80 70 60 40).look, sus: 4.0
      sleep 1/2.0
    else
      #glitch :gs3,3# if spread(1,4).look
      #flop :A3, 1*(ing 50 60 70 110).look, sus: 1.0/2.0 #lovely with c3
      sleep 1/2.0
      glitch :ds3, 127# if spread(1,4).look
      #flip :E3, 50, sus: 1.0 #KEEP
      #flip :g3, 50, sus: 4.0  #lovely riser
      sleep 1/2.0

      #flop_cc motion: 0.4

      #qbitsea :a4, 80, sus: 1
      #flip :g3, 100, sus: 1.0
      #flop :A4, 15, sus: 4.0
      glitch :fs3,20# if spread(1,4).look

      at{
        sleep 1/2.0
        glitch :g3, 50# if spread(1,4).look
        #flop_cc motion: 0.50
        }
    end

    glitch_cc corode: (ine 0.2 0.7 128).look
    #glitch (ing :c3 :a3).look, 30 if spread(7,11).look

    #with_swing -0.1 {
      #flop :E4, 5.5*(ing 50 60 70 110).look, sus: 1.0/2.0
    #}
    #flop_cc motion: 0.45
    sleep 1/4.0
    #glitch :fs3, 40
    sleep 1/4.0

    #dark :e3, 110 if spread(1,2).look
    #flip  :f3, 15, sus: 2.0
    sleep 1/4.0
    #glitch :ds3, 127
    sleep 1/4.0

    #flop_cc motion: 0.48

    with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      glitch :gs3, 40
      #flip :c3, 127-rand*10, sus: 1.0/4.0
      #flip (knit :f4,3,:D4,3,:C4,3).look, 127-rand*20, sus: 1.0#/2.0
    }

    sleep 1/2.0
    glitch :gs3, 80 if spread(1,8).look
    sleep 1/2.0
    glitch :gs3, 90 if spread(1,8).look

    if spread(3,8).look
      flop_cc motion: 0.3
      #flop :c4, 110-rand*15, sus: 2.0
    else
      flop_cc motion: 0.4
      #bitsea :d5, 127, sus: 1
      #flop :e3, 60-rand*10, sus: 1.0
    end

    #dark :cs3, 100

    sleep 1/2.0
    #dark :e3, 100
    #flop :c4, 127-rand*10, sus: 1.0/2.0
    glitch (ing :cs4 :cs4 :cs4 :d4).look,127
    sleep 1/2.0
  end
end

live_loop :light, sync: :unsyncable do; tick
  scorez = (ing
    [[:A3 :C5 :E4] 8]
    [[:F4 :A6 :C5] 8]
    [[:C3 :E5 :G4] 8]
    [Zz 4]

    [[:A3 :C5 :E4] 8]
    [[:E4 :G5 :B3] 8]
    [[:F4 :A6 :C5 :E5] 8]
    [[:C3 :E5 :G4] 8]
    [Zz 8]

    [[:A3 :C5 :E4] 8]
    [[:F4 :A6 :C5] 8]
    [[:C3 :E5 :G4] 4]
    [Zz 4]
    [[:A3 :C5 :E4] 4]
    [[:A3 :C5 :E4] 4]
    [[:E4 :G5 :B3] 4]
    [[:E4 :G5 :B3] 4]
    [[:G4 :B6 :D5 :F4] 8]
    [[:C4 :E5 :G4] 8]
    [Zz 8]
    )
  score = scorez.look[0]
  sleeps = scorez.look[-1]

  at{
    #callstack score[-1],100, sus:1
    sleep 1/2.0
    #operator score[1],100, sus:1
  }

  #heat score[0], 0.5*(ing 10 30 50 10  10 30 40 50).look, sus: sleeps, pads: [0,1,2], sat: 0.0, drive: 0.00
  #deep root(score), 1, sus: (sleeps)*2, drive: 0.55, sat: 0.00
  sleep sleeps
end

live_loop :pacey, sync: :light do; tick
  stop
  #overclock_cc oct: (ing 0,  -12, 0, 12).look
  sleep 0.5
  #tick
  #overclock_cc oct: (ing 0,  -12, 0, 19).look
  #sleep 1
end
