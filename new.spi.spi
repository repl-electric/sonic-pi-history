use_bpm 127


def pad(*args)
  params, opts = split_params_and_merge_opts_array(args)
  opts         = current_midi_defaults.merge(opts)
  n, vel = *params
  if n
    midi_note_on n,vel, *(args << {channel: 1})
  end
end

def pad_cc(cc)
  cc.keys.each do |k|
    n = case k
        when :tone; 50
        when :pitch; 51
        when :motion; 52
        when :fx; 53
        else
          nil
        end
    if n
      midi_cc n, cc[k]*127.0, channel: 1
    end
  end
end

def octave(n, oct)
  if n
    note = SonicPi::Note.new(n)
    note("#{note.pitch_class}#{oct}")
  else
    n
  end
end
#scale C, D, E♭, F, G, A♭, and B♭.

live_loop :test do
  tick
  score = (ing
    [[:C3  :E4 :G3]  4]
    [[:F3  :As3 :C3] 2]
    [[:F3  :As3 :C3] 2]

    [[:As3 :C4 :E4]  2]
    [[_] 2])
  s = score.look
  midi :c3,120, channel: 3

  at{
    #sleep (s[-1]/4.0)*2
    midi octave(root(s[0]),2),10, sus: s[-1]/2.0, channel: 4
    #sleep s[-1]/2.0
    #midi octave(s[0],2)-7, 2, sus: 1/2.0, channel: 4
  }

  pad s[0][0],     sus: s[-1]+0.2, channel: 1, port: :iac_bus_1
  pad s[0][1],100, sus: s[-1]+0.0, channel: 1, port: :iac_bus_1
  pad_cc tone: ((line 0.0, 0.5, 128) + (line 0.5, 0.0, 128)).look
  pad_cc motion: ((line 0.0, 1.0, 128) + (line 1.0, 0.0, 128)).look

  with_transpose 12{
    midi s[0][-1], 75, channel: 2, sus: s[-1]
  }
  s[-1].times{
    sleep 1/2.0
    midi :fs3, 75, channel: 3
    sleep 1/2.0
  }
end
