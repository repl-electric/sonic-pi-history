module Crystal
  @sample_cache = nil; @matcher_lookup = {}
  def self.[](*a)
    unless @sample_cache; @sample_cache = Sample.glob("/Users/josephwilk/Workspace/music/samples/Juno/Soundiron Crystal/samples/**/*.wav"); end
    Sample.matches(@sample_cache, a, @matcher_lookup)
  end
end


with_fx :none, mix: 0 do
  live_loop :pat, sync: :metro do
    #stop
    #sync '18'
    tick
    #sync "16"
    t1 = CineAmbi[/One shots/,/tom/,2]
    k2,k1,k3 = Frag[/kick/,9], Mountain[/subkick/,0], (knit Dust[/kick/,24],3, Dust[/kick/,25],3).look
    k4 = Frag[/kick/,3]

    s=(ring *%W{
     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _
  }).look

    sidechain if eval(s) && spread(1,4).look
    smp eval(s), amp: 1.3*(knit 0.8,4, 0.6,4, 0.7,4, 0.6,4).look , v: 0.2, attack: (knit 0.0,12, 0.02,4, 0.0,8).look, cutoff: 100

    p=Dust[/perc/, /conga/] #MagicDust[/perc/,/stone/,[4..8]].look #*Dust[/perc/, [7,7]]
    #p= Dust[/perc/, [7,7]]
    #p=MagicDust[/perc/,/stone/,[4..8]].look
    p=Analog[/click/].look
    p1,p2,p3,p4 = *Crystal[/cymbal/,[16,18,12,13]]
    p1,p2,p3,p4 = *Crystal[/cymbal/,[4,18,12,14]]
    #  puts p
    s=(ring *%W{
p1 p2 p3 _
_  _  p2 _
p1 _  p2 _
_  _  p2 _

p1 p2 _ p4
_  _  p2 _
p1 _  p2 _
_  _  p2 _

}).look


  if(s=="_")
  end
    with_fx :none, mix: (line 0.2,0.3,32).look do
      if s!= "_" && spread(1,6).look
       #smp MagicDust[:clack, [0,2,3,6]].tick(:insider), amp: 0.5*1, pan: (ring 0.25,-0.25).look(:inside)
      end
      #sidechain if eval(s)

      with_swing -0.1,2 do
      with_fx :gverb, mix: 0.15 do
      smp eval(s), cutoff: (line 110, 115, 6*4).look, attack: (line 0.02, 0.0,6*2).look, amp: 0.2*(line 1.0,0.9,6*8).look, rate: (knit 1,(6*4)-4, 0.85,4, 1,(6*4)-4, 0.75,4).look
        end
      end
      #smp eval(s), cutoff: (line 110, 115, 6*4).look, attack: (line 0.02, 0.0,6*2).look, amp: 1.8*(line 1.0,0.9,6*8).look, rate: (knit 1,(6*4)-4, 0.85,4, 1,(6*4)-4, 0.75,4).look

      if eval(s) && spread(1,1).look
        smp Junk[/RedShaker/,18..22].tick(:i), amp: 0.25, pan: (ing 0.25,-0.25,).tick(:ingit)
      end

    end

    c1 =  (knit Analog[/clapraw/].look,8,Analog[/clap1/].look,8,Analog[/clap2/].look,8,Analog[/clap3/].look,16).look

    c2 =  (knit Frag[/coil/,-31],16).look#, Analog[/clap/,16],16, Analog[/clap/,17],16).look
    c2 =  #(knit Frag[/coil/,-46],16).look#, Analog[/clap/,16],16, Analog[/clap/,17],16).look
    c3 =  (knit Frag[/coil/,-29],16).look#, Analog[/clap/,16],16, Analog[/clap/,17],16).look
    c2 =  Analog[/click/].look

  s=(ring *%W{
 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _
 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _

 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _
 _ _ _ _   c1 _ _ _   _ _ _ _   c2 _ _ _

 _ _ _ _   c1 {path:Analog[/clapraw/,0],amp:0.125} _ _
}).look

    fin= if eval(s) != c2
           (line 0.05, 0.01, 64).look
         else
           (line 1.0, 0.99, 2*64).look
         end
    amp = if ((v=eval(s)) != _)
            v.is_a?(String) ? 1.0 : (v[:amp] || 1.0)
          else
            0
          end
#    smp eval(s),amp: 0.6*amp, cutoff: (ine 127, 110, 1024,).look, finish: fin

    s=(ring *%W{
 _ _ _ _     _ _ _ _   _ _ _ _   _ _ _ _
 _ _ _ _     _ _ _ _   _ _ _ _   _ _ _ _

 _ _ _ _     _ _ _ _   _ _ _ _   _ _ _ _
 _ _ _ _     _ _ _ _   _ _ _ _   _ _ c3 _

 _ _ _ _    _ _ _ _
}).look

  #smp eval(s), amp: 1.0, cutoff: (ine 127, 110, 1024,).look, finish: 0.07, rpitch: -7, attack: 0.15

 # = spread(7,11).map{|s| s ? :hit : :miss}
    s=(ring *%W{_ _ _ _   c1 _ _ _}).look
    #smp eval(s), cutoff: (line 80, 120, 128).look

    h,h1,h2 = MagicDust[/_HI/,18], Dust[/hat/,6], Dust[/hat/, 6]
    #h = Dust[/hat/,7]

    s=(ring *%W{
h _ h _  _ _ h _
_ _ h _  _ _ h _
h _ h _  _ _ h {path:h,amp:0.3}
_ _ h _  _ _ h _}).look

  s1=(ring *%W{
_ _ h _  _ _ h _
_ _ h _  _ _ h _
_ _ h _  _ _ h {path:h,amp:0.3}
_ _ h _  _ _ h _}).look

    amp = if ((v=eval(s)) != _)
            v.is_a?(String) ? 0.5 : (v[:amp] || 0.5)
          else
            0
          end
    smp eval(s), cutoff: 1*(line 110, 127,32).look,
    attack: (line 0.001,0.0,64).look,
    sustain: (knit 0.01,4,0.2,4,1.0,4).look, amp: amp*0.8*0
    #sustain: (knit 0.1,4,0.0125,16,0.5,4).look, amp: amp
    sleep 1/8.0
  end
end
