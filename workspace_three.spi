def bass_one
  (ring
   [:E2,3], [:D2,3],[:B1,3],
   [:FS2,3],
   [:A2,3],
   [:Gs2,1],
   [:D2,3],
   [:Cs2,2],
   [:B1,1],
   [_,1.0],
   
   [:E2,3], [:D2,3],[:Fs2,3],
   [:GS2,3],
   [:A2,3],
   [:E2,1],
   [:D2,2],
   [:Cs2, 0.5, 80],[:E2, 0.5,100],
   [[:A1, :A2], 1+1+1+1.0, 70])
end
def melody_one
  (knit #[:A3, 1],3, [:Cs3,1],3, [:B2,2/4.0],3,
       [:Fs3,3/4.0],1, [:A3,1],1, [:D3,2/4.0],1,
       [:A3, 3/4.0],1, [:D3,1],1, [:E3,2/4.0],1,
       [:E3, 3/4.0],1, [:Fs3,1],1,[:D3,2/4.0], 1,
       [_,   3/4.0],1, [:A2,1],1, [:B2,2/4.0 + (3-3/4.0) - 0.25],1,
       
       [:A3, 3/4.0],3, [:D3,1],3, [:Fs3,2/4.0],3,
       [:Fs3,3/4.0],1, [:B3,1],1, [:A3,2/4.0],1,
       [:A3, 3/4.0],1, [:D3,1],1, [:E3,2/4.0],1,
       [:E3, 3/4.0],1, [:Fs3,1],1,[:D3,2/4.0], 1,
       [_,   3/4.0],1, [:A2,1],1, [:B2,2/4.0 + 3-(3/4.0) - 0.25],1)
end
#live_audio :moog, input: 2
live_loop :metro do
  tick
  #midi (ring :Gs3,32, :Cs3, 32, :E3, 32).look, 120, port: :iac_bus_1, channel: 2,  sustain: 0.8
  sleep 1
end
live_loop :iter, sync: :metro do
  #stop
  tick
  s = (ring 1/4.0, 1/4.0,  # 1
            1/4.0, 1/4.0, 
            1/4.0, 1/4.0,  # 1 
            1/4.0, 1/4.0,
            1/4.0, 1/4.0).look
  shader :decay, :iR, rand*2
  #midi (knit :E2,128, :A2, 128, :B2, 128).look, 1*(line 100, 127,128/1).look, port: :iac_bus_1, channel: 1, sustain: s*2.0
  sleep s #1/4.0  #7=> 2 beats
end
live_loop :high, sync: :metro do
  tick
  #harp (ring :A3), (ring 20,30,30).look, channel: 8, sustain: 6, port: :iac_bus_1
  sleep 12
end

live_loop :melody2 do
  tick
  s = nil
  3.times{
   s = (knit [:A3,12],1, [:Cs4,12],1, [:E4,12],1,  [_,12],1, [_,12],1).tick(:no)
   #sharp s, (ring 30).look
   sleep s[1]
  }
end

live_loop :harmony, sync: :metro do
  tick
  note = (ring [:A2,3], [:D2,3], [:E2,3]).look
  #puts note_inspect(note[0])
  #if note[0] && note[0][0] == :A2
   #bass note, 100, port: :iac_bus_1, channel: 5#, sustain: 3
 # end
    play_midi note[0], note.length > 2 ? note[-1] : 127, port: :iac_bus_1, channel: (note[0] && note[0][0] == :A1) ? 6 : 5, sustain: note[1]
    sleep note[1]
@t2+= note[1]
puts "harm:#{@t2}"
end
@t2 = 0
@notes = 0
live_loop :melody, sync: :metro do
  sync :bass
  tick
  s = nil
  3.times{
    s = (knit 
       [:Fs3,3/4.0],1, [:A3,1],1, [:D3,2/4.0],1,
       [:A3, 3/4.0],1, [:D3,1],1, [:E3,2/4.0],1,

#[:Fs3, 1],3, [:A3,1],3, [:D3,1],3,
              
         # [:Fs3,3/4.0],1, [:A3,1],1, [:D3,2/4.0],1,
         ).tick(:no)
    #harp s, (ring 20,20,20, 30,40,40, 40,60,80).look
    @notes += s[1]
    sleep s[1]
  }
  
  sleep 3/4.0;@notes += 3/4.0
  puts "mel:#{@notes}"
end

#with_fx :reverb, mix: 0.4, room: 0.1 do
live_loop :beat, sync: :metro do
  tick
  k1,k2 = Mountain[/subkick/,0], Frag[/kick/,9]
  h1,h2 = (knit @slices["Fs3/4"][8],1, @slices["A3/4"][1],2).look,  @slices["B3/4"][1]
  if(args=(ring *%W{k1 0 {path:k1,amp:0.1} 0  0 0 0 0  k2 0 0 0   0 0 0 0
                    k2 0 0 0  0 0 0 0
}).look) != "0"
    #zero :A0
    smp eval(args), cutoff: 90
  end

  i1,i2 = MagicDust[/_HI/,[24,25]]

  perc = (ring *%w{_ _ _ _ _ _    i1 i2 _ _ _ _ 
                     _ _ _ _ _ _  _ _ _ _ _ _
}).look
  smp eval(perc), amp: 8.25, pan: (ring 0.25,-0.25).tick(:pan)
  
  hat = (ring *%w{_ _ _ _ h2 _ _ _}) 
  hat2 = (ring *%w{_ _ _ _ h1 _ _ _
                   _ _ _ _ h1 _ {path:h2,amp:0.9} _
                   _ _ _ _ h1 _ _ _
                   _ _ _ _ h1 _ _ _})

  if (args=(ring *%W{0 0 0 0   0 0 1 0.25  0 0 0 0   0 0 1 0
}).look) != "0"
    #smp MagicDust[/_HI/,23], amp: args =="1" ? 0.5 : args
  end
  if (args=(ring *%W{
0 0 0 0   0 0 0 0
0 0 0 0   0 0 0 1}).look) != "0"
    #smp MagicDust[/_MI/,48], amp: args =="1" ? 0.5 : args
  end
  if (args=(ring *%W{0 0 0 0   1 0 0 0}).look) != "0"
    #smp MagicDust[/snare/,0], amp: 1
  end
  if (ring *%W{1 0 0   0 0 0
               0 0 0   0 0 0
               0 0 0   0 0 0}).look == "1"
      #smp MagicDust[/HI_/,52..69].look, amp: 0.3+rand*0.1
  end

  #smp eval(hat.look), amp: 0.3#, rpitch: 0
  #smp eval(hat2.look),amp: 0.5
  sleep 1/8.0
end
#end