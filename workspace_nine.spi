class SonicPi::Core::RingVector
  include SonicPi::SpiderAPI
  def stretch(n)
    super(self.to_a, n)
  end
end

x =(knit :As4, 4, :B4, 4,  :Cs4, 4, :B4, 4)
#              3           4          -              

#puts %w{F#4 34  F#3 5 F#4 4}*8
#puts %w{A#4 B4 C#4 B4*4}

#               1   2  3  4 5  6   7  8
#Cs Ds Es Fs Gs As B Cs Ds Es Fs
#puts x

def deg_seq(*pattern_and_roots)
  patterns_and_roots = pattern_and_roots.map{|pat| 
    if pat =~ /\*/ 
      note, factor = pat.split("*")
      [note] * factor.to_i
    else
      pat
    end
  }.flatten

puts patterns_and_roots

  pattern_and_roots = pattern_and_roots.reduce([]){|accu, id|
    if(/^[\d_]+$/ =~ accu[-1] && /^[\d_]+$/ =~ id)
      accu[0..-2] << "#{accu[-1]}#{id}"
    else
      accu << id
  end}

puts patterns_and_roots


#  puts pattern_and_roots
  patterns = pattern_and_roots.select{|a| /^[\d_]+$|^\d\*\d$/ =~ a.to_s }
  roots   = pattern_and_roots.select{|a| /^[\d_*]+$/ !~ a.to_s}

  ##puts patterns
  #puts roots

end


def note_seq(*patterns)
  patterns.reject{|a| a.empty?}.
  map{|a|
    note, factor = a.last.split("*")
    factor ||= "1"
    factor = factor.to_i
    a[-1] = note
    a.map{|s| s.gsub(/#/,"s")}.
                     map{|s| [s.to_sym] * factor }.
                     flatten
                     }.
  flatten.ring
  end

_ = nil
x = (knit :Fs4, 7, _, 1,  :As4, 7, _, 1)
puts x
puts "---------------------"
puts deg_seq(*%w{FS4 1*7 _ 3*7 _})
puts degs_seq(*%w{F1 12345})