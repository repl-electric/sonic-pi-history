require 'json'

ROOM_SOURCE = "/Users/josephwilk/Workspace/josephwilk/ruby/bright/data.json"
ROOM        = JSON.parse(File.read(ROOM_SOURCE))
CAMERA_1  = ROOM.map{|event| event["people"]["cam_1"]}
CAMERA_2  = ROOM.map{|event| event["people"]["cam_2"]}
CAMERA_3  = ROOM.map{|event| event["people"]["cam_3"]}
SOUND_MAX = ROOM.map{|event| event["sound"]["max"]}
SOUND_AVG = ROOM.map{|event| event["sound"]["avg"]}
SOUND_MIN = ROOM.map{|event| event["sound"]["min"]}

def octave_transform(chord)
  chord.map {|x| 60 + (x%12) }.sort
end
 
def t_matrix(chord_a, chord_b)
  z = octave_transform(chord_a).zip(octave_transform(chord_b))
  z.map {|a,b| b - a }
end
 
def voice_lead(chord_a, chord_b)
  a_leadings = chord_a.map {|x|
    [x, octave_transform(chord_a).index(60 + x%12)]
  }
  t_matrix = t_matrix(chord_a, chord_b)
  puts t_matrix
  b_voicing = a_leadings.map {|x,y|
    x + t_matrix[y]
  }
  b_voicing
end

def chords_for(root, scale)
 chords = (0..8).map{|degree| chord_degree(degree+1, root, scale)}
 chords.to_a
end

bar = 1.0

live_loop :metronome do
  cue :whole
  cue :half
  cue :quarter
  sleep bar/4.0
  cue :quarter
  cue :half
  sleep bar/4.0
  cue :quarter
  sleep bar/4.0
  cue :quarter
  sleep bar/4.0
end


@bass_line = chords_for(:Fs1, :major_pentatonic).shuffle


live_loop :smooth_chords do
  @bass_line.each_cons(2) do |a,b|
   if @last_c.nil?
      play (a.first - 24), amp: 0.6
      play a, release: 0.1
      sleep 1
    end
  end
sleep 1
end