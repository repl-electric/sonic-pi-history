class SonicPi::Core::RingVector
  include SonicPi::SpiderAPI
  def stretch(n)
    super(self.to_a, n)
  end
end

x =(knit :As4, 4, :B4, 4,  :Cs4, 4, :B4, 4)
#              3           4          -              

#puts %w{F#4 34  F#3 5 F#4 4}*8
#puts %w{A#4 B4 C#4 B4*4}

#               1   2  3  4 5  6   7  8
#Cs Ds Es Fs Gs As B Cs Ds Es Fs
#puts x

def deg_seq(*pattern_and_roots)
  pattern_and_roots = pattern_and_roots.flatten
  pattern_and_roots = pattern_and_roots.map{|pat| 
    if pat =~ /\*/ 
      note, factor = pat.split("*")
      ([note] * factor.to_i).join("")
    else
      pat
    end
  }.flatten

  pattern_and_roots = pattern_and_roots.reduce([]){|accu, id|
    if(/^[\d_]+$/ =~ accu[-1] && /^[\d_]+$/ =~ id)
      accu[0..-2] << "#{accu[-1]}#{id}"
    else
      accu << id
  end}
  patterns = pattern_and_roots.select{|a| /^[\d_]+$|^\d\*\d$/ =~ a.to_s }
  roots   = pattern_and_roots.select{|a| /^[\d_*]+$/ !~ a.to_s}

  notes = patterns.each_with_index.map do |pattern, idx|
    root = roots[idx]
    if(root[0] == ":")
      root = root[1..-1]
    end
    s = /[[:upper:]]/.match(root.to_s[0]) ? :major : :minor
    if(s == :minor)
      s = if    root.to_s[1] == "h"
        :harmonic_minor
      elsif root.to_s[1] == "m"
        :melodic_minor
      else :minor
      end
    end
    #MESSEY 
    root = root[0..1] + root[2..-1] if root.length > 2
    pattern.to_s.split("").map{|d| d == "_" ? nil : degree(d.to_i, root, s)}
  end.flat_map{|x| x}
  (ring *notes)
end


def note_seq(*patterns)
  patterns.reject{|a| a.empty?}.
  map{|a|
    note, factor = a.last.split("*")
    factor ||= "1"
    factor = factor.to_i
    a[-1] = note
    a.map{|s| s.gsub(/#/,"s")}.
                     map{|s| [s.to_sym] * factor }.
                     flatten
                     }.
  flatten.ring
  end

_ = nil
puts "---------------------"
puts deg_seq(%w{Fs4 1*7 _ 3*7 _})
puts deg_seq(%w{Fs4 34 Fs3 5 Fs4 4}).stretch(4)

interleave(deg_seq(%w{Fs4 1*7 _ 3*7 _}), deg_seq(%w{Fs4 34 Fs3 5 Fs4 4}).stretch(4))

def interleave(*args)
  raise 'No arrays to interleave' if args.empty?
  max_length = args.map(&:size).max
  # assumes no values coming in will contain nil. using dup because fill mutates
  args.map{|e| e.dup.fill(nil, e.size...max_length)}.inject(:zip).flatten.compact
end

puts interleave([1,2,3,4], [1,2,3,45])