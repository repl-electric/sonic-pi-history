sop_on :A3, 20, sustain: 12
sop_mode -2
#musicbox :A3, sustain: 1
#sop_cc 1, 0
#sop_off :B3

midi_cc 65,  127*1  # port
midi_cc 114, 1
live_loop(:metro)do
  tick;
  cue("16") if look % 16.0 == 0.0
  cue("24") if look % 24.0 == 0.0
  cue("18") if look % 18.0 == 0.0
  cue("32") if look % 32.0 == 0.0
  cue("64") if look % 64.0 == 0.0
#  midi_start if tick == 0
#  midi_clock_beat 1.0, port: :iac_bus_1
  sleep 1.0
end

live_loop :moving, sync: :metro do
  #stop
  sync :music
  mega =
    (ring
    (ring #1/4     1/4.0
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],   #1/4
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],   #1/4

      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],
      [:E3, 1/8.0], [_, 1/8.0],   [:Cs3, 1/8.0], [_, 1/8.0],
      ))

  sleep 3/4.0
  score = mega.tick(:mega)

  midi_cc 5, (ring 2,4).tick(:inside), port: :iac_bus_1, channel: 9
  puts "---------------------"
  score.count.times{ #-Every 8 switch
    tick
    s2 = ""
      #zero s2=(knit :D2,24,:Fs2,24,:Gs2,24).look,5 #might not get played.
      s = score.look
      #puts "#{s2}/#{s}"
      zero s,(line 100,0,9).look*0.5 if s && s[0]
      #zero s,(ring 120,20,20,20).look if s && s[0]
      #midi_pitch_bend 0.5, port: :iac_bus_1, channel: 9
      #puts score.map{|z| z[-1] }.reduce(:+) + 3/4.0
      sleep s[-1]
  }
end

live_loop :fucj, sync: :metro do
  tick
  midi_cc 1, ((line 0,127,127)+(line 127,0,127)).look,  port: :iac_bus_1, channel: 10
  sop_cc 1, 1
  sleep 1/2.0
end

live_loop :music, sync: :metro do
  tick
  #sync "16"
  harp_cc phase: 0.5,  mod: 0.2, cutoff: 1.0, bass: 0.2   #(ramp 0.0, 0.85,128/8.0).tick(:firey), bass: 0.0

  score = (knit
    [:A3, 3/4.0],3, [:D3,1.0],3, [:E3,2/4.0],3,
    [:FS3,3/4.0],1, [:A3,1.0],1, [:D3,2/4.0],1,
    [:A3, 3/4.0],3, [:D3,1.0],3, [:E3,2/4.0],3)

  #cue(:m) if ((look+1) % score.count)  == 0
  3.times{

    if spread(1,3).look
      sharp s=score.tick, (ring 20,20,20, 30,40,40, 40,60,80).look
    end

    with_transpose(12+12) do
      musicbox  score.look, 127
    end
    harp s=score.tick, (ring 20,20,20, 30,40,40, 40,60,80).look
    sleep s[-1]
  }
  sleep 3/4.0
  #musicbox score.look, 127

end

set_volume! 2.0
with_fx :none, mix: 0 do
  live_loop :pat, sync: :metro do
    #sync '18'
    tick
    #sync "16"
    c1 = Dust[/clap/,1]
    k2,k1,k3 = Frag[/kick/,9], Mountain[/subkick/,0], (knit Dust[/kick/,24],3, Dust[/kick/,25],3).look
    s=(ring *%W{
     k2 _ _ _   k1 _ _ _   k2 _ _ _   k1 _ _ _
     k2 _ _ _   k1 _ _ _   k2 _ _ _   k1 _ _ _
     k2 _ _ _   k1 _ _ _   k2 _ _ _   k1 _ _ _

     k2 _ k2 _  k1 _ _ _   k2 _ _ _   k1 _ _ _
     k2 _ _ _   k3  _ k2 _
  }).look

    s2=(ring *%W{
     k2 _ _ _   _ _ _ _   k1 _ _ _
     _ _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   k1 _ _ _
     _ _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _  _ _ _ _   k1 _ _ _
     _ _ _ _   _ _ _ _   Frag[/kick/,3] _ k2 _
  }).look

    s3=(ring *%W{
     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   _ _ _ _

     k2 _ _ _   _ _ _ _   _ _ _ _
     k1 _ _ _   _ _ _ _   Frag[/kick/,3] _ k2 _
  }).look

    shader :iMode, 0
    sidechain if eval(s) && spread(1,4).look


    smp eval(s), amp: 3*(knit 0.8,4, 0.6,4, 0.7,4, 0.6,4).look , v: 1.1, attack: (knit 0.0,12, 0.02,4, 0.0,8).look
    if s!="_" && spread(1,8+4).look
        shader [:iR,:iG,:iB].choose, rand*1.0
      if spread(1,32).look
        at do
          smp Analog[/17 /].tick(:echo), amp: 0.5
          sleep 0.25
          smp Analog[/17 /].tick(:echo), amp: 0.3
        end
      else
        sidechain
        smp Analog[/17 /].tick(:echo), amp: 0.5
      end
    end

    p=Dust[/perc/, /conga/] #MagicDust[/perc/,/stone/,[4..8]].look #*Dust[/perc/, [7,7]]
#    p= Dust[/perc/, [7,7]]
    p=MagicDust[/perc/,/stone/,[4..8]].look

    #  puts p
    s=(ring *%W{
p _ _ _   _ _ p _
_ _ p _
_ _ _ _   _ _ p _
_ _ p _

p _ _ _   _ _ p _
_ _ p _
_ _ _ _   _ _ p _
_ _ p _
}).look

    s=(ring *%W{
p _
p _ _ _
_ p _ _
_ _ p _
_ _ _ p
_ _ p
_ _ p
}).look

  if(s=="_")
    # zero (knit :A2,24,:E3,24).look,5
#    zero (ring :A3,1,:E3,1,:A3,1    ).look,5
  end
    with_fx :none, mix: (line 0.2,0.3,32).look do
      if s!= "_" && spread(1,6).look
     #  smp MagicDust[:clack, [0,2,3,6]].tick(:insider), amp: 0.5*1, pan: (ring 0.25,-0.25).look(:inside)
      end
      smp eval(s), cutoff: (line 110, 115, 6*4).look, attack: (line 0.02, 0.0,6*2).look,
      amp: 0.8*(line 1.0,0.9,6*8).look, rate: (knit 1,(6*4)-4, 0.85,4, 1,(6*4)-4, 0.75,4).look
    end
    c = MagicDust[/HI_/, [54,55,56,57]].look
    if (s=(ring *%W{
_ _ _  _ _ _
c _ _  _ _ _
_ _ _  _ _ _
_ _ _  _ _ _
}).look) != _
#      smp eval(s), pan: (ring 0.25,-0.25).look
    end

  c1,c1 = MagicDust[/HI_/,[1..4]].look, Analog[/clap /].look
  s=(ring *%W{
 _ _ _ _   c1 _ _ _   _ _ _ _   c1 _ _ _
 _ _ _ _   c1 _ _ _   _ _ _ _   c1 _ _ _

 _ _ _ _   c1 _ _ _   _ _ _ _   c1 _ _ _
 _ _ _ _   c1 _ _ _   _ _ _ _   c1 _ _ _
}).look

    smp eval(s), amp: 0.25

 # = spread(7,11).map{|s| s ? :hit : :miss}
  s=(ring *%W{_ _ _ _   c1 _ _ _}).look
#  smp eval(s), cutoff: (line 80, 120, 128).look

    h,h2 = MagicDust[/_HI/,18],Dust[/hat/,4]
  s=(ring *%W{
_ _ h _  _ _ h _
_ _ h _  _ _ h _
_ _ h _  _ _ h {path:h,amp:0.4}
_ _ h _  _ _ h _

}).look
    amp = if ((v=eval(s)) != _)
            v.is_a?(String) ? 0.5 : (v[:amp] || 0.5)
          else
            0
          end
    smp eval(s), cutoff: (line 100, 127,32).look, attack: (line 0.02,0.0,64).look, sustain: (knit 0.01,4,0.02,4,0.025,4).look, amp: amp*2

    sleep 1/8.0
  end
end
live_loop :bells, sync: :metro do
  stop
  tick
  # h,h2 = MagicDust[/MD_BELL_RES/,5],Frag[/hat/,7]
  #  smp MagicDust[/hi/,/chimes/,/_A\./].look, amp: 0.5
  sleep 32
end

live_loop :vocals, sync: :metro do
  tick
#  stop
  with_fx :gverb, room: 400, mix: (ring 0,0,0,1.0).look, room_slide: 0.5, decay: 8.0 do
    with_fx :gverb, room: 800, mix: (ring 0,0,0,1.0).look, room_slide: 0.5, decay: 8.0 do |g_fx|
    hz1,hz2 = (knit @slices["A3/4"][1],2).look, @slices["B3/4"][1]
    hat2 = (ring *%w{_ _ hz1 _
                     _ _ hz1 {path:hz2,amp:0.25}
                     _ _ hz1 _
                     _ _ hz1 _})
     #smp eval(hat2.look), amp: 1, rate: [-1,1].choose, attack: 0.125
      if spread(1,12).look
        #sop :B2, 30, sustain: 12
        #sop_cc 1, (ring 30, 40, 50).look
      end
      #midi_cc 1, (line 0,80,32).look,  port: :iac_bus_1, channel: 10

      8.times{sleep 1/4.0; control g_fx, room: rand_i(800)
        #sop_cc 1, (ring 30,40,50,60,70).look

#        midi_pitch_bend 127, port: :iac_bus_1, channel: 10
        #        midi_cc 1, (line 0,80,32).look,  port: :iac_bus_1, channel: 10
      }
    end
  end
end
