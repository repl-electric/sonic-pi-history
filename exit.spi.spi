REST=[[[_, 0.25]], 2];use_bpm 63.5
live_loop :Fall_out_of_your_screen do tick;
  live_loop :Within_the_letters{stop}
  unity "/camera/4"

  score =  (ing  #15.25
 #   [[[:b2 2]  [:d4 2]   [:fs3 2]]           2]                  REST
  #  [[[:fs2 2] [:a4 2]   [:cs4 2]]           2]                  REST
    [[[:a2 2]  [:cs4 2]   [:e4 2]]            2]
    [[[:d2 2]  [:fs3 2]  [:a3 2]  [[:e4 2] [:e4 2]].choose] 2]  REST
    [[[:e2 2]  [:gs3 2]  [:b3 2]]  2]
   # [[[:a2 2]  [:cs3 2]   [:e4 2]]]  2]                  REST
#    [[[:fs4 2] [:A4 2]   [:Cs3 2] ]  2]                          REST
    )
  cue :kernel_panic
  s=score.look;;c=s[0];zzz=s[-1]
  whitespace c[0][0], sus: 12
  if spread(1,6).look
    #rev :b5, 1
    #eek :Gs3, 10
  end
  #rev :a6, 15, sus: 12
  if !c[0][0]
    eek (ing :e4 :gs4 :e4 :b4 _ _).look, (ing 100 120).look(:missing), sus: 3.0, at: 0.0, mod: 0.0, mode: 2
  end
  with_transpose -12 {cpu2 c[1], 60, sus: 2 }
  c.each_tick(:inner){|n|
    qbitsea n,2.0*(ing 80 70 85 70).look(:inner), mode: 0, cutoff: 1.0, phase: 0, comp: 0
  }

  pf=1.8
  i=(method :operator)
  at{
    i.call(c[0], 60*pf, sus: 4)
    sleep 0.5
    i.call(c[1], 50*pf, sus: 4)
    sleep 0.25
    i.call(c[2], 55*pf, sus: 4)
        sleep 0.25
    i.call(c[3], 70*pf, sus: 2)
        sleep 0.25
    i.call(c[4], 30*pf, sus: 8)
        sleep 0.25
    i.call(c[5], 30*pf, sus: 8)
        sleep 0.25
  }
  at{
    sleep 0.5
    exception root(c), 127, sus: 0.25, atk: 0.01, shape: 1.0, wet: 1.0
    sleep 0.5
    exception root(c), 40, sus: 0.25, atk: 0.2, shape: 1.0, wet: 0.5
  }
  #exception root(c), 127, sus: 2#, shape: 1.0, : #, wet: 0.1, more: 0.0, shape: 0.8, atk: 0.2

  at{
    8.times{; tick(:a)
      kick_machine (ing
                    K1 _ _ _   _ _ _ _     K3 _ _ _   _ _ _ _
                    K1 _ _ _   _ _ _ _     K3 _ _ _   _ _ _ _
                    ).look(:a), def: 8, accent: 1.7*1
      sleep 1/4.0
    }
  }

  null root(c), 127*0.5, mode: 2

  8.times{tick(:in2);
    s=(ing
      _ _ _ _ _ _ [1] 1
      _ _ _ _ _ _ 1 1
      _ _ _ _ _ _ 1 _
      ).look(:in2)
    #s=_
    #mt s, 95, 127
    mt_cc morph: 0.0#(line 0.01, 0.4, 32).look(:in2)
    sleep zzz/8.0
  }
end

live_loop :glitch, sync: :Fall_out_of_your_screen do; tick
      p=(ing
      _ _ _ _                _ _ _ _
      _ _ _ _                _ _ _ _
      [TS[49]] _ _ TS[12]    _ _ _ _

      _ _ _ _                _ _ _ _
      _ _ _ _                _ _ _ _
      TS[7] _ _ _            _ _ _ _

      _ _ _ _                _ _ _ _
      _ _ _ _                _ _ _ _
      TT[49] _ _ TS[12]      _ _ _ _

      _ _ _ _                _ _ _ _
      _ _ _ _                _ _ _ _
      TS[7] _ _ _            _ _ _ _
      )

    p=p.look
    #p=_
    fx=:lpf
    accent = (ing 0.2 0.2 0.3 0.5).look
    attack = 0.0
    r = 1.0
    if p && p.is_a?(Array)
      p = p[0]
      accent=accent*1.5
    end
  if p
    with_fx :krush, mix: 0.2 do
      with_swing(0.01) do
        with_fx(fx, phase: (ring 1/4.0,1/4.0,1/8.0).look){
     #     smp p, amp: 1.5*accent, rate: r, attack: attack
        }
      end
    end
  end
  sleep 1/8.0
end



no{
qbitsea_cc oct: 0.5
qbitsea_cc drive: 0.27
qbitsea_cc charge: 0.50
qbitsea_cc fm: 0.00
qbitsea_cc wav: 0.00
qbitsea_cc wav_amp: 0.30
qbitsea_cc atk: 0.83
qbitsea_cc mod: 0.80
qbitsea_cc motion: 0.036
qbitsea_cc formant: 0.36
qbitsea_cc mul: 0.00
qbitsea_cc bass: 0.27

#qbitsea_cc width: 0.50
#qbitsea_cc center: 0.15
#qbitsea_cc head: 0.00

eq lo: 0.85
eq mi: 0.85
eq hi: 0.85
}
