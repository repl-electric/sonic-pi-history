#live_audio :moog, input: 2
live_loop :metro do
  tick
  #midi (ring :Gs3,32, :Cs3, 32, :E3, 32).look, 120, port: :iac_bus_1, channel: 2,  sustain: 0.8
  sleep 1
end
live_loop :iter, sync: :metro do
  #stop
  tick
  s = (ring 1/4.0, 1/4.0,  # 1
            1/4.0, 1/4.0, 
            1/4.0, 1/4.0,  # 1 
            1/4.0, 1/4.0,
            1/4.0, 1/4.0).look
  #midi (knit :E2,128, :A2, 128, :B2, 128).look, 1*(line 100, 127,128/1).look, port: :iac_bus_1, channel: 1, sustain: s*2.0
  sleep s #1/4.0  #7=> 2 beats
end
live_loop :high, sync: :metro do
  tick
  #harp (ring :A4), (ring 20,30,30).look, channel: 8, sustain: 6, port: :iac_bus_1
  sleep 12
end
live_loop :harmony, sync: :metro do
  tick
  note = (ring [:E2,3], [:D2,3],[:B1,3],
               [:FS2,3],
               [:A2,3], 
               [:Gs2,1], 
               [:D2,3], 
               [:Cs2,2],
               [:B1,1],
               [_,1.0], #ODD timing

               [:E2,3], [:D2,3],[:Fs2,3],
               [:GS2,3],
               [:A2,3], 
               [:E2,1], 
               [:D2,2], 
               [:Cs2, 0.5, 80],[:E2, 0.5,100],
               #[[:A1, :A2], 1+1+1+1.25, 70]
               [[:A1, :A2], 1+1+1+1.0, 70]
               ).look
  #puts note_inspect(note[0])
  if note[0] && note[0][0] == :A2
     #play_midi :A0, 100, port: :iac_bus_1, channel: 5, sustain: 3
  end
    play_midi note[0], note.length > 2 ? note[-1] : 127, port: :iac_bus_1, channel: (note[0] && note[0][0] == :A1) ? 6 : 5, sustain: note[1]
    sleep note[1]
@t2+= note[1]
puts "harm:#{@t2}"
end
@t2 = 0
@notes = 0
live_loop :melody, sync: :metro do
  tick
  s = nil
  3.times{
   s = (knit [:A3, 3/4.0],3, [:D3,1],3, [:E3,2/4.0],3,      #8.25     0.75 - 1.0 - 0.5
             [:Fs3,3/4.0],1, [:A3,1],1, [:D3,2/4.0],1,      #3
             [:A3, 3/4.0],1, [:D3,1],1, [:E3,2/4.0],1,      #3
             [:E3, 3/4.0],1, [:Fs3,1],1,[:D3,2/4.0], 1,     #3
             [_,   3/4.0],1, [:A2,1],1, [:B2,2/4.0 + (3-3/4.0) - 0.25],1,  #6  #+ 3/4.0 + 1 + 2/4.0
          
             [:A3, 3/4.0],3, [:D3,1],3, [:Fs3,2/4.0],3,   
             [:Fs3,3/4.0],1, [:B3,1],1, [:A3,2/4.0],1,    
             [:A3, 3/4.0],1, [:D3,1],1, [:E3,2/4.0],1, 
             [:E3, 3/4.0],1, [:Fs3,1],1,[:D3,2/4.0], 1,
             [_,   3/4.0],1, [:A2,1],1, [:B2,2/4.0 + 3-(3/4.0) - 0.25],1,
             ).tick(:no)
   harp s, (ring 20,20,20, 30,40,40, 40,60,80).look
   @notes += s[1]
   sleep s[1]
  }
  @notes += 3/4.0     
  sleep 3/4.0                      # 1 itr = 23.25 /  46.5  / 69.75 /   93
  puts "mel:#{@notes}"
end

#with_fx :reverb, mix: 0.4, room: 0.1 do
live_loop :beat, sync: :metro do
  tick
  k1,k2 = Mountain[/subkick/,0], Frag[/kick/,9]
  if(args=(ring *%W{[k1] 0 0  0   0 0 0 0    [k2] 0 0 0   0 0 0 0
                    [k2] 0 0 0    0 0 0 0
}).look) != "0"
    zero :A0
    smp @slices['fs4/4'][0]
    #smp Corrupt[/loop/,/120/,3], part: 4, amp: 1

    #smp eval(args)[0], amp: 0.8+rand*0.1, cutoff: 100
  end
  if (ring *%W{1 0 1 0   0 0 0 0
               1 0 1 0   0 0 0 0
               
               1 0 1 0   0 0 0 0
               1 0 1 0   0 0 0 0
               
               1 0 1 0   0 0 0 0
               1 1 0 1   1 0 1 0}).look != "0"
   #smp MagicDust[/_HI/,24], amp: 0.25, pan: (ring 0.25,-0.25).tick(:pan)
  end


  if (args=(ring *%W{0 0 0 0   0 0 1 0.25  0 0 0 0   0 0 1 0
}).look) != "0"

    #smp MagicDust[/_HI/,23], amp: args =="1" ? 1.1 : args
  end
  if (args=(ring *%W{
0 0 0 0   0 0 0 0
0 0 0 0   0 0 0 1}).look) != "0"
    #smp MagicDust[/_MI/,48], amp: args =="1" ? 0.5 : args
  end
  if (args=(ring *%W{0 0 0 0   1 0 0 0}).look) != "0"
    #smp MagicDust[/snare/,0], amp: 1
  end
  if (ring *%W{1 0 0   0 0 0
               0 0 0   0 0 0
               0 0 0   0 0 0}).look == "1"
      smp MagicDust[/HI_/,52..69].look, amp: 0.3+rand*0.1
  end
  sleep 1/8.0
end
#end