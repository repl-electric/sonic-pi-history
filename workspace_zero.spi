["experiments", "log"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}.rb"}
set_volume! 1.0
_=nil

#@s = MountainLoop[/.*/,12]
#use_sample_bpm

define :note_to_sample do |n|
  note_info(n).midi_string.gsub("s", "#").gsub("Eb", "D#").gsub("Ab", "G#")
end

# F♯, G♯, A, B, C♯, D, and E
#use_sample_bpm Fraz[/F#m/i, 0]

live_loop :beatz do
#sample  Fraz[/F#m/i, 0]
sleep 1
end

r = 1/8.0

live_loop :arp do
  with_synth :prophet do
    n = (knit 
         chord(:Fs3, ['m'].choose),     64,
         chord(:Fs3, ['m+5'].choose),   32,
         chord(:Fs3, ['m7+5'].choose, invert: -1),  16,
         chord(:A3, :sus2, invert: 0), 32,

         chord_degree(6, :Fs3, :minor, 3,  invert: -3)[0..2],8,
         chord_degree(6, :Fs3, :minor, 3,  invert: -3),24,
         chord_degree(6, :Fs3, :minor, 3,  invert: -4),32,

         chord_degree(3, :Fs2, :minor, 3,  invert: 1),64,
         chord_degree(4, :Fs2, :minor, 3,  invert: 2),32,
         chord_degree(7, :Fs2, :minor, 3,  invert: 1),32,

#         chord_degree(5, :Fs3, :minor, 3,  invert: -3),32,
#         chord_degree(5, :Fs3, :minor, 3,  invert: -4),32,
#         chord_degree(7, :Fs3, :minor,  3, invert: -2),16,
#         chord_degree(7, :Fs3, :minor,  3, invert: -1),16,
#         chord_degree(7, :Fs3, :minor,  3, invert: 0),32,
#         chord(:Fs4, ['m'].choose),     8,
#         chord(:Fs3, ['m'].choose),     8,
#         chord(:Fs4, ['m'].choose),     8,
#         chord(:Fs4, ['m'].choose, invert: -1),  4,
#         chord(:Fs4, ['m'].choose, invert: -2),   4,
).tick(:c)
    puts note_inspect(n)
    with_fx(:slicer, phase: 1/2.0, invert_phase: 1, probability: 0.5, mix: 0.0) do
      synth :hollow, note: (knit 
                            _,3,
                            chord(:Fs2, 'm'),2,
                            _, 3,
                            _, 3,
                            chord(:Fs2, 'm7+5', invert: 1),2,
                            _, 3
).tick(:hc), amp: 1.0, attack: 0.01, decay: 1.0, release: 0.1, cutoff: 80
    end

    with_fx((knit :none,4, :reverb, 1, :none, 3).tick(:fx), decay: 1.0, phase: 1/4.0, room: 0.1) do
      c = (knit n[0],2, :r, 0,n[-1],2, :r,0, n[1],3).tick(:c) #.choose
      with_transpose(0) do
        synth :plucked,  note: (ring c, _).tick , amp: 2.0, attack: 0.01
      end
      #play (n.to_a) , amp: 1, release: 0.2, attack: 0.1, attack_level: 0.5
      with_transpose(-12) do
        with_synth(:growl) do
          #play (knit n[0],1, _,7).tick(:bass), decay: (1/2.0)*2, release: 0.1, attack: 0.1, amp: 0.6
        end
        with_transpose(0) do
          with_synth(:growl) do
            play (ring :Fs2, _, _, _, _, _, _, _).look(:bass), decay: 0.5, release: (knit 0.5,8, 0.5,8).tick(:r), attack: 0.001, amp: 0.2, detune: 12
            if (ring n[0], _, _, _, _, _, _, _).look(:bass)
              with_fx(:slicer, phase: 1/8.0, smooth: 0.0, probability: 0.5) do
                sample Heat[/Low_Pad/i, /#{note_to_sample(n[-1])[0..-2]}1/i], amp: 2.5
                            #puts¯ note_info(n[0]).midi_string.gsub("s", "#").gsub("Eb", "D#").gsub("Ab", "G#")[0..-2]
                            end
                            end
                            end
                            end
      end
    end
  end
  sleep 1/8.0
end

                            live_loop :background do
                              #sample Ether[/D/i, 0], amp: 8.0, rate: rrand(-2.0,2.0), pan: (Math.sin(vt*13)/1.5)
                              8.times{sync :drum}
                            end

live_loop :drum do
#  sample Heat[/F#/i,1], amp: 1.0
 # sample Heat[/C/i,1], amp: 1.0


  with_fx(:bitcrusher, bits: 10, sample_rate: 30000) do
  (ring 32, 32).tick(:time).times{sync :arp}
  with_fx((knit :none,3, :echo,1).tick(:f), mix: 0.5, decay: 0.5, phase: 1/2.0) do
 sample Frag[/kick/i, [1,1,1,1]].tick(:drums), rate: 1.0, amp: 2.0
  end
#  (ring 4, 4,4, 4, 4).tick(:time).times{sync :arp}
#  sample Frag[/kick/i, [0,9]].tick(:snares), rate: 1.0, amp: 8.0
  #sample Frag[/snap/i, [0,0,0,0,1,1,1,1]].tick(:snap), rate: 1.0, amp: 2.0, start: (rrand 0.0,0.1)
end
end

live_loop :hats do |idx|
  sync :arp
  m = [0.3,0.2,0.1, 0.4].choose
  4.times{
   with_fx(:bitcrusher, bits: (ramp *(7..24).to_a.reverse).tick(:fxkc)) do
      with_fx(:reverb, room: 0.3, mix: m) do
#        with_fx(:slicer, phase: 0.025, probability: 0.5, mix: m) do
        # sample Frag[/hat/i, Range.new(0,(ring 2,4).tick(:cr))].tick(:d), start: rrand(0.0,0.1), rate: 1.0, amp: 2.0
end
#        end
      end
  sleep 1/8.0}
  idx+=1
end

# F♯, G♯, A, B, C♯, D, and E

live_loop :humand do
  with_fx(:bitcrusher, bits: 24, sample_rate: 30000) do
    with_fx(:flanger, pan: (Math.sin(vt*13)/1.5), phase: 2, wave: 4, invert_wave: 1, stereo_invert_wave: 1){
      octive = [2].choose
      with_fx(:bitcrusher, bits: 7) do
        #sample (ring Heat[/bells/i, /d##{octive}/i], Heat[/bells/i, /g##{octive}/i], Heat[/bells/i, /f##{octive}/i]).choose, decay: 16.0, cutoff: 80
                          end
                        }
  8.times{sync :arp}
#  sample Sop[/_f#/i,20], amp: 1.0
  8.times{sync :arp}
#  sample Sop[/g#/i,4], amp: 0.0

  #sample Sop[/g#/i,4]
  8.times{sync :arp}
  #sample Sop[/d/i,4]
  end
end

live_loop :perc do
#  sample Frag[/coil/i,"D",2], amp: 1.0
  32.times{sync :arp}
#  sample Frag[/coil/i,"F#",2], amp: 1.0
  32.times{sync :arp}
end