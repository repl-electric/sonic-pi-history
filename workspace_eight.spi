# work out taxicab metric

def octave_transform(chord)
  chord.map {|x| 60 + (x%12) }.sort
end

def t_matrix(chord_a, chord_b)
  z = octave_transform(chord_a).zip(octave_transform(chord_b))
  z.map {|a,b| b - a }
end

def voice_lead(chord_a, chord_b)
  a_leadings = chord_a.map {|x|
    [x, octave_transform(chord_a).index(60 + x%12)]
  }
  t_matrix = t_matrix(chord_a, chord_b)
  puts t_matrix
  b_voicing = a_leadings.map {|x,y|
    x + t_matrix[y]
  }
  b_voicing
end

use_synth :beep

live_loop :smooth_chords do
  [
    #chord(:c, :major7),
    #chord(:b3, 'm7-5'),
    #chord(:f, :major7),
    #chord(:e, 'm7-5'),
    #chord(:a, '7+5-9'),
    #chord(:d, :minor7),
    #chord(:d, :minor7),
    #chord(:g, '7sus4'),
    #chord(:g, '7')
  
    chord_degree(1, :FS3, :major),
    chord_degree(6, :FS3, :major),
    chord_degree(4, :FS3, :major),
    chord_degree(5, :FS3, :major),
    #chord(:C, '13')
    
  #chord_degree(5, :FS2, :major)


  ].each_cons(2) do |a,b|
    if @last_c.nil?
      play (a.first - 24), amp: 0.6
      play a, release: 0.1
      sleep 1
    end

    @last_c ||= Array(a)[1..-1]

    puts "orig #{@last_c.map{|c| note_info(c).midi_string}}"
    @last_c = voice_lead(@last_c,Array(b)[1..-1])

    puts "new #{@last_c.map{|c| note_info(c).midi_string}}"


    with_synth :tri do
    # bass note
    play (b.first - 24), amp: 1.6
    end

    with_fx :reverb, pre_amp: 2, mix: 0.2 do
      8.times do |i|
        play @last_c, release: 0.1, pan: (Math.sin(vt*13)/1.5) if spread(5,8)[i]
        sleep 0.0125
      end
    end

  end
  @last_c = nil
end