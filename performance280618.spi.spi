load_support('piezoelectric_resonator'); use_bpm 127

#glitch_cc mode: 0, corode: 0.5
#glitch_cc mode: 0

#eject_cpu_core
#stop
#glitch_cc tubes: 0.0
fx reverb: 1.00, tube: 1.00
#stop

#overclock_on :f3

#overclock_on :F3
#overclock_x
#overclock_cc drive: 0.70
#overclock_cc amp: 0.50

#overclock_cc drive: 0.80
#overclock_cc amp: 0.85

#overclock_cc motion: 0.50

#flop_cc motion: 0.30,  drive: 0.00
#flip_cc motion: 0.50, drive: 0.00

#glitch_cc tubes: 0.50
#glitch_cc corode: 0.30

#glitch_cc tubes: 0.50
#glitch_cc corode: 1.00

#lovely
#flop_cc motion: 0.30,  drive: 0.90,  sat: 1.00
#flip_cc motion: 0.40, drive: 0.90, sat: 1.00


#flop_cc motion: 0.60,  drive: 0.90,  sat: 0.00
#flip_cc motion: 0.60, drive: 0.90, sat: 0.10
explode_aura
#overclock_on :E3
roots alive: 1
#create_tree
#cube circle: 1
slice_cube  x: 20.0

sea height: 10
cam :top

linecolor cube: 0.4

roots_chase freq: 0.3, amp: 0.5



live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  at{
    sleep 0.5
    sea circle: rand
    sea sphere: rand* 0.2
    }
  with_bpm 127*1 do
    #kalshot :G3, [5,10,15,20].choose, sus: 6 if spread(1,12).look
    if spread(4,8).look
      glitch_cc mode: (ing 0 2 3 5).look
    end
    if spread(8,8).look
      #dark :e3, 122
      if spread(3,8).look
      at{
        sleep 0.5
        #dark :e3, 110
        }
      end
    end

    glitch_cc corode: 1.0
    glitch :c3, 10.5*(ing 65 60 60 60).look

    at{
      sleep 0.25
      glitch :c3, 2.1*(ing 120 90 100 100    100 90 90 90).look
    }

    glitch_cc corode: 0.8

    if false#spread(7,11).look
      if spread(1,4).look
        flip :F3, 1*(ing 50 60 70 110).look, sus: 1.0#/2.0
        sleep 1/4.0
        #flop :E3, 1*(ing 50 60 70 110).look, sus: 2.0#/2.0
        #flop :D4, 2*(ing 50 60 70 110).look, sus: 1.0/8.0
        #glitch :ds3,2# if spread(1,4).look
        sleep 1/4.0
      else
        #flop :E4, 1*(ing 50 60 70 110).look, sus: 1.0/2.0
        sleep 1/4.0
        #glitch :as3,2# if spread(1,4).look
        sleep 1/4.0
      end

      #flip (knit :A5, 4 ,:F5,4, :E5,8).look, (ing 80 70 60 40).look, sus: 4.0
      sleep 1/2.0
    else
      #glitch :gs3,3# if spread(1,4).look
      #flop :A3, 1*(ing 50 60 70 110).look, sus: 1.0/2.0  #plays off the c3 lovely....
      sleep 1/2.0
      glitch :ds3, 127# if spread(1,4).look
      #flip :g3, 90, sus: 4.0  #lovely riser
      sleep 1/2.0

      #flop_cc motion: 0.4

      bitsea :a4, 80, sus: 2
      flip :g4, 100, sus: 2.0
      #flop :A4, 15, sus: 4.0
      glitch :fs3,20# if spread(1,4).look

      at{
        sleep 1/2.0
        glitch :g3, 50# if spread(1,4).look
#        flop_cc motion: 0.50
        }
    end


    glitch_cc corode: (ine 0.2 0.7 128).look
    #glitch (ing :c3 :a3).look, 30 if spread(7,11).look

    #with_swing -0.1 {
      #flop :E4, 5.5*(ing 50 60 70 110).look, sus: 1.0/2.0
    #}
    #flop_cc motion: 0.45
    sleep 1/4.0
    #glitch :fs3, 40
    sleep 1/4.0
    #dark :e3, 110 if spread(1,2).look
    #flip  :f3, 15, sus: 2.0
    sleep 1/4.0
    #glitch :ds3, 127
    sleep 1/4.0

    #flop_cc motion: 0.48

    with_swing ((knit -0.1/2.0, 4, 0.1,4).look) {
      glitch :gs3, 40
      #flip :g4, 127-rand*10, sus: 1.0/4.0
      #flip (knit :f4,3,:D4,3,:C4,3).look, 127-rand*20, sus: 1.0#/2.0
    }

    sleep 1/2.0
    #flip :e3, 127-rand*10, sus: 1.25
    glitch :gs3, 80 if spread(1,8).look
    sleep 1/2.0
    glitch :gs3, 90 if spread(1,8).look
    #flop_cc motion: 0.52

    flop :c4, 127-rand*10, sus: 2.0
    #dark :cs3, 122
    sleep 1/2.0
    #flop :c4, 127-rand*10, sus: 1.0/2.0
    #flop_cc drive: rand, sat: 1.00
    #dark :e3, 100
    glitch (ing :cs4 :cs4 :cs4 :d4).look,127
    sleep 1/2.0
  end
end

live_loop :wind, sync: :unsyncable do; tick
  stop
  if spread(1,128).rot(-2).look
    #mt S, 20, 20
  end

  s=(knit :A3, 128, _, 128).look
  bitsea s, (line 127,50,256*4).look, sus: (knit 1/4.0,32,1/2.0,31, 1, 1).look if spread(7*1,11*4).look

  if spread(7*1,11*4).look
    if spread(7*1,11*4*8).look
  #    bitsea :A4, (line 127,100,256).look, sus: 2, hi: 0.85
    end
  end

 # bitsea :A5

#   bitsea :G3, ((line 20,40,128)+(line 40,20,128)).look, sus: (ing 1/4.0 1/2.0 1/4.0).look if spread(3*4,8*4).look
#   qbitsea :E3, 50, sus: (ing 1/2.0 1 1).look if spread(1*4,8*4).look
  sleep 1/8.0
end

# A F E
# F D C
# F D G

live_loop :light, sync: :unsyncable do; tick
  scorez = (ing
    [[:A3 :C5 :E4] 8]
    [[:F4 :A6 :C5] 8]
    [[:C3 :E5 :G4] 8]
    [Zz 4]

    [[:A3 :C5 :E4] 8]
    [[:E4 :G5 :B3] 8]
    [[:F4 :A6 :C5 :E5] 8]
    [[:C3 :E5 :G4] 8]
    [Zz 8]

    [[:A3 :C5 :E4] 8]
    [[:F4 :A6 :C5] 8]
    [[:C3 :E5 :G4] 4]
    [Zz 4]
    [[:A3 :C5 :E4] 4]
    [[:A3 :C5 :E4] 4]
    [[:E4 :G5 :B3] 4]
    [[:E4 :G5 :B3] 4]
    [[:G4 :B6 :D5 :F4] 8]
    [[:C4 :E5 :G4] 8]
    [Zz 8]
    )
  score = scorez.look[0]
  sleeps = scorez.look[-1]

  at{
    callstack score[-1],100, sus:1
    sleep 1/2.0
    operator score[1],100, sus:1
  }

  heat score[0], 0.5*(ing 10 30 50 10  10 30 40 50).look, sus: sleeps, pads: [0,1,2], sat: 0.0, drive: 0.00
  deep root(score), 1, sus: (sleeps)*2, drive: 0.55, sat: 0.00
  sleep sleeps
end

live_loop :pacey, sync: :light do; tick
  stop
 # overclock_cc oct: (ing 0,  -12, 0, 12).look
  sleep 0.5
#  tick
#  overclock_cc oct: (ing 0,  -12, 0, 19).look
#  sleep 1
end

live_loop(:unsyncable) do;  sleep 1.0;end
