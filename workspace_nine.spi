
_ = nil

      n = (knit
        (stretch invert_chord(chord(:As3,:m)[0..1], 0),1), 12,              #3
        (stretch invert_chord(chord(:As3,:m), 0),1), 12,                    #3
#HIT 1 3 FS3-AS4
        (stretch invert_chord(chord(:Cs3,:M)[1..-1], 1),1), 12,             #5
        (stretch invert_chord(chord(:Cs3,:M), 1),1), 12,                    #5
#HIT FS3-AS4
        (stretch invert_chord(chord(:Ds4,:m), -2),1), 20,                   #6
         _, 4,
#HIT FS4-B4
        (stretch invert_chord(chord_degree(7, :Fs3, :major,3), -2),1), 20,  #7
         _, 4,
#HIT FS4-B4
        (stretch invert_chord(chord(:Es3,'dim'), 1),1), 10,                 #7
        (stretch invert_chord(chord(:Es3,'dim'), 1),1), 10,                 #7
         _, 4,
#HIT AS4-CS4
        (stretch dice(6) > 3 ? invchord(:Fs3,'sus4', -1) : invchord(:Fs3,'sus4', 0),1), 20,                #1
         _, 4,    
#HIT AS4-CS4
        (stretch invert_chord(chord(:Fs3,:M), -1),1), 20,                   #1 
         _, 4,
#HIT AS4-B4
        (stretch invert_chord(chord(:B4,:M), -2)[0..2],1), 10,              #4 
        (stretch invert_chord(chord(:B4,:M), -3)[0..2],1), 10,              #4 
         _,4)
#HIT AS4-B4



puts (knit chord(:As3,:m)[0..1], 12,
           chord(:As3,:m),       12,
           chord(:Cs3,:M, invert: 2).delete_at(1), 12,
           chord(:Cs3,:M, invert: 1), 12,
           chord(:Ds4,:m, invert: -2), 20,  
           _, 4,
           chord_degree(7, :Fs3, :major, 3, invert: -2), 20,
           _, 4,
          chord(:Es3,'dim', invert: 1), 10,
          chord(:Es3,'dim', invert: 1), 10,
           _, 4,
          dice(6) > 3 ? chord(:Fs3,'sus4', invert: -1) : chord(:Fs3,'sus4', invert: 0), 20,
         _, 4,
         chord(:Fs4,:M, invert: -1), 20,
         _, 4,
        chord(:B4,:M, invert: -2)[0..2], 10,
        chord(:B4,:M, invert: -3)[0..2], 10,
         _, 4)