bar = 4.0                                                         #1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8  

def as_ring(pat)
 ring(*pat.split("\s"))
end

def pat(s, p, *args)
 sync :s
 if p == "x"
  sample *([s]+args)
 end
end

live_loop :beatz do
sync :foo
density(-2) do
 32.times{
 cue :s
 sleep bar/16.0}
end
end
 
                                                                    #1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8  
#live_loop :tin2  do; 16.times{pat(Ether[/hat/i,11], bar,  (ring *%w{x - x - x - x _ x - x - x - x -}).tick(:a), pan: (ring -0.25,0.25).tick(:rz), amp: 1*(ring 0.1,0.1,0.1,0.1,0.3,0.3,0.5,0.5, 0.4,0.4,0.4,0.4,0.8,0.8,0.8,0.8).tick(:v), beat_stretch: (ring 0.8,0.8,0.8,0.8,0.8,0.8,1.0,1.0).tick(:o))};end
live_loop(:kicker)do; 16.times{pat(Ether[/noise/i,2],      (ring *%w{x - x - - - - x - x - - - - - -}).tick(:a), amp: 2.0, beat_stretch: (rrand 0.99,1.0))};end
live_loop(:snare) do; 16.times{pat(Ether[/noise/i,10],     (ring *%w{- - - - x - - - - - - - x - - -}).tick(:b), beat_stretch: 2.0, amp: 0.5)};end

live_loop(:perc1) do; 16.times{
with_fx :echo, mix: 0.3 do; with_fx :slicer, phase: 0.125, probability: 0.5 do
                               pat(Ambi[/hat/i,1],         (ring *%w{- x - x - x - x - x - x - x - x}).tick(:d), amp: 0.05);end;end};end


live_loop(:kicker)do; 16.times{pat(Ether[/click/i,2],      (ring *%w{x - x - - - - - x - x - - - - -}).tick(:a), amp: 1.0, beat_stretch: (rrand 0.88,0.9))};end
live_loop(:snare) do; 16.times{pat(Ether[/click/i,8],      (ring *%w{- - - - x - - - - - - - x - - -}).tick(:b), beat_stretch: 1.0, amp: 0.5)};end
live_loop(:perc1) do; 16.times{
with_fx :echo, mix: 0.3 do;
with_fx :slicer, phase: 0.125, probability: 0.5 do
                               pat(Ether[/click/i,8],      (ring *%w{- x - x - x - x - x x - x x - x}).tick(:d), amp: 0.05);end;end};end
live_loop(:kick)  do; 16.times{pat(Ether[/kick/i,7],       (ring *%w{x - - - - - - - x - - - - - - -}).tick(:d), amp: 0.05)};end


#live_loop(:perc)  do; 16.times{pat(Ether[/click/i,15],     (ring *%w{- - - - - - x - - - - x - - - -}).tick(:p), beat_stretch: 0.1, amp: 0.0)};end
live_loop(:swish) do; 
with_fx :reverb, room: 0.7, mix: 0.3 do
16.times{
with_fx(:slicer, phase: 0.15, probability: 0.5){pat(Ether[/snare/i,12],  
                                                          (ring *%w{- - - - - x - - - - - - - - - x}).tick(:c), amp: 1*0.1, start: 0.0, rate: -1.0)}};end;end
#live_loop(:kick)  do; 16.times{pat(Ether[/kick/i,5],      (ring *%w{x - - - - - - - - - - - - - - -}).tick(:d), amp: 0.0)};end
#live_loop :kick2  do; 16.times{pat(Ether[/kick/i,6], bar, (ring *%w{- - x x - - - - - - - - - - - -}).tick(:e), amp: 0.0)};end