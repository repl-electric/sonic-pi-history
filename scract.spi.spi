def eek_cc(*args)
  cc = if args[0].is_a?(SonicPi::Core::SPMap)
         args[0]
       else
         resolve_synth_opts_hash_or_array(args)
       end
  cc.keys.each do |k|
    n = case k
        when :mod; 1
          when :at; :at
        else nil
        end
    if n
      if n == :at
        midi_channel_pressure cc[k]*127.0, channel: 16, port: :iac_bus_1
      else
        midi_cc n, cc[k]*127.0, *(args << {port: :iac_bus_1} <<
          {channel: 16})
      end
    end
  end
end

def eek(*args)
  params, opts = split_params_and_merge_opts_array(args)
  opts         = current_midi_defaults.merge(opts)
  n, vel = *params
  if n.is_a?(Array)
    args =  args  << {sustain: n[1]}
    n = n[0]
  end
  if n
    midi n, vel, *(args << {port: :iac_bus_1} << {channel: 16})
  end
  eek_cc(opts)
end


live_loop :a do
  tick
  eek :A2, 30, sustain: 1, at: rand_i(127), mod: 0.4
  #eek_cc mod: rand(1.0)
  sleep 3
end
