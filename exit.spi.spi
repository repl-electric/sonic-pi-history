REST=[[[_, 0.25]], 2];use_bpm 63.5
live_loop :Fall_out_of_your_screen do tick;
  live_loop :Within_the_letters{stop}
  unity "/camera/4"

  score =  (ing  #15.25
    [[[:b2 2]  [:d5 2]   [:fs3 2]]           2]                  REST
    [[[:fs2 2] [:a4 2]   [:cs3 2]]           2]                  REST
    [[[:a2 2]  [:b4 2]   [:e4 2]]            2]
    [[[:d3 2]  [:fs5 2]  [:a3 2]  [[:cs5 2] [:e4 2]].choose] 2]  REST
    [[[:e2 2]  [:gs4 2]  [:b3 2]]  2]
    [[[:b2 2]  [:d5 2]   [:fs3 2] [:cs4 2]]  2]                  REST
    [[[:fs4 2] [:A4 2]   [:Cs3 2] ]  2]                          REST
    )
  cue :kernel_panic
  s=score.look;;c=s[0];zzz=s[-1]
  whitespace c[0][0], sus: 12
  if spread(1,6).look
    #rev :b5, 1
    #eek :Gs3, 10
  end
  #rev :a6, 15, sus: 12
  if !c[0][0]
    #eek (ing :e4 :gs4 :e4 :b4 _ _).look, (ing 100 120).look(:missing), sus: 3.0, at: 0.0, mod: 0.0, mode: 2
  end
  with_transpose -12 {cpu2 c[1], 60, sus: 2 }
  c.each_tick(:inner){|n|
    qbitsea n,2.0*(ing 80 70 85 70).look(:inner), mode: 0, cutoff: 1.0, phase: 0, comp: 0
  }

  pf=0.2
  i=(method :callstack)
  i.call(c[0], 60*pf, sus: 4)
  i.call(c[1], 50*pf, sus: 4)
  i.call(c[2], 55*pf, sus: 4)
  i.call(c[3], 70*pf, sus: 2)
  i.call(c[4], 30*pf, sus: 8)
  i.call(c[5], 30*pf, sus: 8)


  with_transpose 12{
    corrupt (ing
             :b2 :b1
             :fs2 _
             :a2
             :d3 _
             :e2
             :b2 _
             :fs3 :fs2).look, mode: 1, sus: 2, motion: 0.2, flatpitch: 1.0
  }

  at{
    with_transpose 0{
    exception root(c), 60, sus: 0.25, atk: 0.01, shape: 1.0, wet: 1.0 if root(c)
    sleep 0.5
    #exception root(c), 80, sus: 0.25, atk: 0.2, shape: 1.0, wet: 0.5
    sleep 0.5
    #exception root(c), 90, sus: 0.25, atk: 0.2, shape: 1.0, wet: 0.8
    sleep 0.5
     # exception root(c), 127, sus: 0.25, atk: 0.2, shape: 1.0, wet: 0.9
      }

  } #, shape: 1.0, : #, wet: 0.1, more: 0.0, shape: 0.8, atk: 0.2

  null root(c), 127*0.5, mode: 2, sus: 1

  8.times{tick(:in2);
    callstack (ing
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :fs5 _   _   :fs5 :a4 _
          :a5 _ :e5 _    _   :cs6 :a4 _
          :a5 _ :a4 _   :e5  :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    _   :b5  :a4 _
          :a5 _ :a4 _    :e6 :b5  :a4 _
               ).look(:in2), (ing 90 90 80 80 70 70 60 60).look(:in2)*0.0


    #mt_cc morph: ((line 0.0, 1.1,16*16*2)+(line 1.1, 0.0, 16*16*2)).look
    s=(ing
      [5] 5 5 _ 2 _
      ).look(:in2)
    mt s, 115, 127
    mt_cc morph: (line 0.01, 0.4, 32).look(:in2)
    sleep zzz/8.0
  }
end



no{
qbitsea_cc oct: 0.5
qbitsea_cc drive: 0.27
qbitsea_cc charge: 0.50
qbitsea_cc fm: 0.00
qbitsea_cc wav: 0.00
qbitsea_cc wav_amp: 0.30
qbitsea_cc atk: 0.83
qbitsea_cc mod: 0.80
qbitsea_cc motion: 0.036
qbitsea_cc formant: 0.36
qbitsea_cc mul: 0.00
qbitsea_cc bass: 0.27

#qbitsea_cc width: 0.50
#qbitsea_cc center: 0.15
#qbitsea_cc head: 0.00

eq lo: 0.85
eq mi: 0.85
eq hi: 0.85
}
