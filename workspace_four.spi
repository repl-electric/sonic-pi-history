x= <<EOS
vec4 lineDistort(vec4 cTextureScreen, vec2 uv1){
  float sCount = 900.;
  float nIntensity=0.1;
  float sIntensity=0.2;
  float noiseEntry = 0.0;
  float accelerator= 1000.0;
  float x = uv1.x * uv1.y * iGlobalTime * accelerator;
  x = mod( x, 13.0 ) * mod( x, 123.0 );
  float dx = mod( x, 0.05 );
  vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );
  vec2 sc = vec2( sin( uv1.y * sCount ), cos( uv1.y * sCount ) );
  cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;
  cResult = cTextureScreen.rgb + clamp(nIntensity, noiseEntry,1.0 ) * (cResult - cTextureScreen.rgb);
  return vec4(cResult, cTextureScreen.a);
}
void main(void)
{
  vec2 uv = gl_FragCoord.xy / iResolution.xy -.5;
  uv.x *= iResolution.x/iResolution.y;
  vec4 color = vec4(0.1);
  gl_FragColor = lineDistort(color,uv);
}
EOS

@client ||= OSC::Client.new('10.0.0.10', 9002)
@client.send(OSC::Message.new("/shader", x))