D4=:d4;E4=:e4;FS4=:Fs4;GS4=:Gs4;Cs4=:Cs4;A4=:A4;B4=:B4;D3=:d3;E3=:e3;FS3=:Fs3;GS3=:Gs3;Cs3=:Cs3;A3=:A3;B3=:B3;D2=:d2;E2=:e2;FS2=:Fs2;GS2=:Gs2;Cs2=:Cs2;A2=:A2;B2=:B2;C2=:c2;C3=:c3 #__nonsave__
use_bpm 63.5;#set_volume! 1.0
sop_cc motion: 0.1
#sop_mode 0

live_loop :Fall_Into_Your_Screen, sync: :metro do
  tick
#  stop
  score =  (ing
    [[[:a2 2] [:Cs4 2] [:E3 2]]  2]   [[[_ 0.25] ]  2]
    [[[:cs2 2] [:e4 2] ]  2]          [[[_ 0.25] ]  2]
#    [[[:b3 2]   [:d3 2] [:fs3 2]]  2]   [[[_ 0.25] ]  2]
#    [[[_ 2]   [:e4 2]  [:a3 2]]  2]     #  [[[_ 0.25] ]  2]
#    [[[_ 2]   [:fs4 2] [:a3 2]]  2]     [[[_ 0.5] ]  2]
#    [[[:fs3 2]  [:a4 2] [:cs3 2]]  2]   [[[_ 0.25] ]  2]

    )
  s=score.look
  c=s[0]
  #eek :a2,   sus: 12, mode: 2
  #eek :cs3,  sus: 12, mode: 2
  if spread(1,6).look
    #rev :b5, 1
    #eek :Gs3, 10
  end
  #with_transpose 0 { piano3 root(c),(ing 127 120).look, sus: 2 }
  #rev :a6, 15, sus: 12
  #piano root(c), (ring 35,40).look*1.5, sus: c[0][-1]
  c.each{|n|tick(:inner);
    #sop n[0], 2.0*(ing 80 70 85 70).look(:inner), sus: ((n[-1])*1)+0.5, mode: 0, cutoff: (ramp 0.0, 1.1, 12).tick(:innert)#, cutoff: 1.0
    #piano3 n[0]
  }
  #violin root(c), 127*1.0, mode: 1#, sus: 2.0#, defon: 0.0, at: 0.0 #, sus: 1 , form: 0.0, shape: 0.0, mul: 4, at: 1.0
  #broken root(c)+12*0, 30, motion: 0.4 #, sus: 1.5
  #strings c[0][-2], 35
  #sleep (s[-1])*1
  yes{
    if spread(1,3).look
      with_fx :gverb, room: 200.0, mix: 0.8, release: 8, spread: 0.9 do
        with_fx :slicer, phase: 1/8.0 do
          #smp Drip[/effect/].look, amp: 0.4, cutoff: 100, rate: -0.125, attack: 0.5
        end
      end
    end
  }
  sleep (s[-1])*1
end

no   { vioshot(:a5, :on) }
#yes { vioshot_x }
#midi_note_on :a1, channel: 5

live_loop :percussion, sync: :metro do
  d1,d2,d3,d4 = *Drip[/cymbal/,[0,2,3,4]];d1c = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/c#01.wav"; d1d = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/d01.wav"; d1e = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/e01.wav"; d1f = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/f#01.wav"; d1g = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/g#01.wav"; d1a = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/a-01.wav"; d1b = "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_cymbals/b01.wav";

  with_fx :echo, mix: 1*(ring 0.025+rand*0.1,0.055+rand*0.1,0.03,0.02,0.01).look, phase: (ring 1/4.0, 1/8.0).look do
    8.times{
      with_swing 0.01,2 do
        tick
        pp = (ing
          _ _ _ _    _ _ _ _     _ _ _ _    _ _ _ _
          _ _ _ _    _ _ d1 _    _ _ _ _   _ _ _ _
          ).look
        pp=_
        if pp
          tick(:pp)
          fx = :none
          cutoff_bump=(pp.is_a?(Array) ? 15 : rand_i(10))
          accent = (pp.is_a?(Array) ? 0.7 : 0.4)*1
          if pp && pp.is_a?(Hash)
            fx = pp.values[0]
            pp = pp.keys[0]
          end
          with_fx(fx, phase: 1/3.0, decay: 1.5, room: 250, spread: 0.8, damp: 0.5,pre_damp:0.5,release:6){
            fuzz = rand(0.05)
            with_fx (ing :slicer,:krush,:bitcrusher,:echo).tick(:pfx), mix: 0.5, phase: 1/4.0, decay: 2 {
              smp pp, amp: accent+5.0, attack: 0.0, start: 0.1-fuzz, rate: (knit -0.25,32,-0.25,32,
                -0.5-fuzz, 1,-0.5,31,
                -0.25-fuzz,1,-0.25,31).look
            }
            smp pp, amp: (3+accent+(rand*0.1))*1,
            rate: -2*(knit 1.1,4, 1.0,2).look, pan: (ing
              0.25 0.25 -0.25 -0.25  0.25 -0.25
              0.5  0.5  -0.25 -0.25  0.25 -0.5
              0.5  0.5  -0.25 -0.25  0.25 -0.5
              ).look, cutoff: (ing 110,80).look+cutoff_bump, cutoff: (ramp 40,127,256*4).tick(:aaashoo2t)
          }
        end
      end
      s = (ing
        _ _   _ _   [5] _   _ _   _ _  _ _  5 _  _ _
        _ _   _ _   [5] _   5 _   _ _  _ _  5 _  _ _
        _ _   _ _   [5] _   _ _   _ _  _ _  5 _  _ _
        _ _   _ _   [5] _   _ _   5 _  _ _  5 _  _ _
       ).look
      s2 = (ing _ _  _ _   2 _   _ _).look
      s2=(ing
        _ _ 2 _     2 _ 3 _    _ _ 2 _   3 _ _ _
        _ _ 2 _     3 _ 2 _    _ _ 2 _   2 _ _ _
        _ _ 2 _     2 _ 3 _    _ _ 2 _   3 _ _ _
        _ _ 2 _     3 _ 2 _    _ _ 3 _   3 _ _ _
        ).look
      s=_
      s2=_
      accent=(line 90, 100, 16*4).look
      if s && s.is_a?(Array)
        s = s[0]
        accent=120+rand_i(5)
      end
      if s
        mt s, accent
      end
      accent = 85
      if s2 && s2.is_a?(Array)
        s2 = s2[0]
        accent=110+rand_i(5)
      end
      mt s2, accent if s2
      mt_cc morph: ((line 0.0, 1.0,8*16)+(line 1.0, 0.0, 16*8)).look
      sleep 1/8.0
    }
  end
end

live_loop :It_is_Dark_in_here, sync: :sudden do;z,zs=nil;tick
  live_loop :Fall_Into_Your_Screen {stop}
  #stop
  zs=(ing
    :d4 :cs4 _ :a3 _ :e4 _ :A4 :A4 :A4 :A4 :A4
    :d4 :cs4 _ :a3 _ :b3 _ :A4 :A4 :A4 :Fs4 :A4
    )
  z=zs.look
  #z=_
  if z
    harp z
    piano z, 0+(ing 70 65 55).look * 1.0, sus: 4/2.0
  end
  if zs.look(offset: 1) == :a3 && look % 24 < 12
    n=[:cs3, :e3]
    n.each{|n| piano n, 40, sus: 6}
  end
  if zs.look(offset: 1) == :a3 && look % 24 >= 12
    n=[:cs3, :e3]
    n.each{|n| piano n, 40, sus: 6}
  end
  if zs.look(offset: 1) == :b3
    n=[:d3, :fs3].shuffle
    at{piano n[0], 50, sus: 6; sleep 1/16.0; piano n[1], 45, sus: 6 }
  end
  if zs.look(offset: 1) == :e4
#    n=[:a2, :cs4, :e3].each{|n| piano n, 40, sus: 6}
  end

  #musicbox z,1, sus: 4 if spread(1,12*2).look
  sleep 1/2.0
  no{
    v=1
    c = chord(zs.look(offset: 1),ct(zs.look(offset: 1)))
    #with_transpose   0 { zero c[1], v, sus: 12*1} if spread(1,2).rot(1).look
    #with_transpose -12 { zero c[2], v, sus: 12*1} if spread(1,2).rot(1).look
    #with_transpose  12 { zero c[0], v, sus: 12*1} if spread(1,2).rot(0).look
    #with_transpose -24 { zero c[0], v, sus: 12*1} if spread(1,2).rot(1).look
    cue :zero if spread(1,2).rot(0).look
  }
  sleep 1/2.0
  #eek z, sus: 6, mode:2 if spread(1,3).look
  sleep 1/4.0
  #stop
end

zero_cc noise: .0, wet: .8, pulse: .1, more: .1

live_loop :sssng do
  sync :zero
  16.times{
    tick
    i=(ing 1.0 _ _ 0.5 _ _ 0.25 _ 1.0  _ _   0.5 _ _ 0.125 _).look
    if i
      smp Tape[/_high/,49], amp: i, pan: (ing -0.125 0.125).look, finish: (ine 0.2 1.0 100).look, start: (ine 0.0 0.8 100).look
    end
    sleep 1/8.0
  }
end

live_loop :kick, sync: :metro do
  k1,k2,k3,k4 = Frag[/kick/,9], Mountain[/subkick/,0], Mountain[/kick/,4], Lo[/kick/,15];
  p=Dust[/perc/, /conga/]; t1 = Tape[/tom/,24]; km = Lo[/kick/,/mid/]; tc = Tape[/cymbals/]; ts = Tape[/snares/]; tt = Tape[/toms/]; df = Drip[/fx/]; kt = Lo[/kick/,/thin/]; m1 = Mountain[/microperc/]; f1 = ["/Users/josephwilk/Workspace/music/samples/Tuned/Drip_effects/D-01.wav", "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_effects/D01.wav", "/Users/josephwilk/Workspace/music/samples/Tuned/Drip_effects/E01.wav"][2]; c=Crystal[/cymbal/]; cf=Crystal[/fx/]; c1 = Analog[/clapraw/,0]; c2 = Analog[/04 clap1/,0]; c3 = Analog[/04 clap2/,0]; c4 = Analog[/04 clap3/,0]; c5 = Analog[/13 clap/,0]; c6 = Analog[/13 clap/,1]; c7 = Analog[/13 clap/,2];
  8.times{
    tick
    kd = Lo[/kick/,/dark/].look; kk = Lo[/kick/,/clicky/].look; kp = Lo[/kick/,/phat/].look; cc = Drip[/cymbal/].look; cs = (0..17).map{|n| Crystal[/cymbal/].tick(:i)}; c1 = (knit Analog[/clapraw/].look,8,Analog[/clap1/].look,8,Analog[/clap2/].look,8,Analog[/clap3/].look,16).look; c5=Tape[/cymbal/,[7,7,7,7]].look
    #smp tc.take(12).look, amp: 0.5+rand*0.1, rate: (ing 0.85,1.0, 1.0).look if spread(1,12*2).look

    k=(ing
      [kt[1]] _ _ _  ts[8] _ _ _      k1 _ _ _   _ _ _ _
      k1 _ _ _       _ _ _ _          k3 _ _ _   _ _ _ t1
      k1 _ _ _       %l{tc[6]} _ _ _  k3 _ _ _   _ _ _ t1
      k1 _ _ _       _ _ _ _          k1 _ %l{tc[6]} _   _ _ [f1 0.99] _
      _ _ _ _        ts[8] _ _ _      k1 _ _ _   _ _ _ _
      k1 _ _ _       _ _ _ _          k3 _ _ _   _ _ _ t1
      k1 _ _ _       %l{tc[6]} _ _ _  k3 _ _ _   _ _ _ t1
      k1 _ _ _       _ _ _ _          k1 _ %e{tc[6]} _   _ _ [f1 0.99] _
      )

    #smp c2 if spread(1,16).look
    #k=k.map{|s| look % 32 == 0 ? _ : _ }
    #sop_mode (ing 0 1 2 3 4 5 6).look#, motion: (ing 0.0,1.0).look
    #sop_mode(0) if !k

    k=(ing
      [kt[1]] _ _ _   ts[2] _ ts[9] _     k3 _ tt[9] _  ts[3] _ _ _
      k1  _ _ _       ts[2] _ ts[9] _     k3 _ _ _   %h{ts[3]} _ _ t1
      k1  _ _ _       ts[2] _ ts[9] _     k3 _ _ _   %h{ts[3]} _ _ t1
      k1  _ _ _       ts[2] _ ts[9] _     [k3] _ _ _   ts[3] _ _ _
      )

    kdark = Lo[/kick/,/dark/]
    kphat = Lo[/kick/,/phat/]
    kz=(ing
      [kt[1]] _ _ k1    _ _ _ t1  _ _ _ _   k1 _ k1 _
      kt[1] _ _   k1    _ _ _ t1  _ _ _ _   k1 _ k1 _
      kt[1] _ _   k1    _ _ _ t1  _ _ _ _   k1 _ k1 _
      kt[1] _ _ _       _ _ _ t1  _ _ _ _   k1 _ k1 _
      )

    yes{
    with_swing 0.08{
      hs=(knit
        (ing [Tape[/hi/,26]] _  _ _   tc[17] _  _ _).look, 8*2,
        (ing Tape[/hi/,26] _  _ _   tc[17] _  _ _).look, 8*1,
        (ing tc[17] _  _  tc[9]     [Tape[/hi/,26]] Tape[/hi/,34]  _ _).look, 8*1
        ).look
      accent=0.4
      if hs && hs.is_a?(Array)
        hs = hs[0]
        accent+=0.1+rand(0.09)
      end
      smp hs, amp: accent
      }
    }
    s=(ing
      2 _ _ _ 5 _ _ _     5 _ _ _      _ _ _ _
      5 _ _ _   _ _ _ _   5 _ [2] 3    _ [5] 5 5
      ).look
    accent=110
    s=_
    if s && s.is_a?(Array)
      s = s[0]
      #eek :gs5, 90, sus: 1/8.0, mode: 0
      accent=10+rand_i(5)
    end
    if spread(1,6).look
      #eek :e5, 50, sus: 1/8.0, mode: 0
      #eek_cc mode: 2
    end
    if s
      mt (ing s).look, accent
    end

    if (s=(ing
        [5] _   5 _
        5   _   5 _
        5   _   5 _
        5   [5] 5 _
          ).look)
      accent=85
      s=_
      if s && s.is_a?(Array)
        s = s[0]
        accent=120
      end
      if s
        mt s,accent
      end
    end

    s=(ing
      c5 _ c5 _  c5 _ [c5] c5    c5 _ c5 _  c5 _ c5 _
      c5 _ c5 _  c5 _ c5 _       c5 _ c5 _  c5 _ [c5] _
      c5 _ _ _   c5 _ _ _         c5 _ _ _   _ _ _ _
      c5 _ c5 _  c5 _ _ _         c5 _ c5 _  c5 _ [c5] _
      ).look
    s=(ing
      _ _ c5 _   _ _ _ _         _ _ _ _   _ _ _ _
      _ _ c5 _   _ [c5] c5 _     _ _ _ _   _ _ _ _
      _ _ c5 _   _ _ _ _         _ _ _ _   _ [c5] c5 _
      ).look
    accent = 0.5
    if s.is_a?(Array)
      accent = 0.8
      s = s[0]
    end
    yes{
    with_swing 0.02 {
      smp s, amp: accent*0.5+(ing
          0.5 0 0.125 0 0.5 0 0.8 0.5
          0.5 0 0.125 0 0.8 0 0.125 0
          0.125 0 0.125 0 0.8 0 0.125 0
          0.125 0 0.125 0 0.125 0 0.8 0).look,
        pan: 0.0125, cutoff: (line 100, 127,64).look, pan: Math.sin(vt*13)/1.5
      }
    }
    p=_
    if p
      if spread(7*2,11*3).look
        with_fx :hpf do
          #smp tt[8], amp: 0.125
        end
        #(knit true,48,false,48).look ? tick(:i) : look(:i)
        #smp tt.look(:i), amp: (line 0.9, 1.0,128).look, rate: 0.25
      end
      if spread(4,31).look
        #(knit true,32,false,0).look ? tick(:i2) : look(:i2)
        #smp Mountain[/microperc/,5], amp: 0.5
      end
    end

    dx = Drip[/fx/,/orig/].shuffle.look  #24
    k2=(ing
      _ _ _ _                          _ _ _ _
      _ _ _ _                          _ _ _ _
      [ts[49]] _ _ ts[12]              _ _ _ _

      _ _ _ _                          _ _ _ _
      _ _ _ _                          _ _ _ _
      ts[7] _ _ _                      _ _ _ _

      _ _ _ _                         _ _ _ _
      _ _ _ _                          _ _ _ _
      tt[49] _ _ ts[12]                _ _ _ _

      _ _ _ _                          _ _ _ _
      _ _ _ _                          _ _ _ _
      ts[7] _ _ _                      _ _ _ _
      )

    kp=k2.look
    kp=_
    fx=:lpf
    accent = (ing 0.2 0.2 0.3 0.5).look
    attack = 0.0
    r = 1.0
    if kp && kp.is_a?(Array)
      kp = kp[0]
      accent=accent*1.5
    end
    no{
    with_swing(0.01) do
      with_fx(fx, phase: (ring 1/4.0,1/4.0,1/8.0).look){
        smp kp, amp: 6*accent, rate: r, attack: attack if kp
      }
    end
    }
    k=k.look
    #k=_
    no{
      if spread(1,64).rot(-64+(8*2)).look   #4*1/8
        rev :d5, 60
      end
      if k && spread(1,64).rot(0).look
        #smp k1, amp: 5
        #sync :Fall_Into_Your_Screen
        sop :fs4, sus: 4.0
        cue(:sudden)
        violin_x
        strings_x
        sync :entry
      end
    }

    if spread(1,128).rot(-12).look
      #mt 13, (line 100,127, 128).tick(:blah)
    end

    #midi(:c3, 60+(rand_i 10), channel: 2) if k == [kt[1]] #|| k.look == k3 || k == [kt[1]]
    kick_machine k, amp: 1.0*accent*1.1*(knit 0.8,4, 0.6,4, 0.7,4, 0.6,4).look, v: 0.2 #, attack: (knit 0.0,12, 0.02,4, 0.0,8).look#,  rate: (knit 1,(6*4)-4, 0.85,4, 1,(6*4)-4, 0.75,4).look)
    sidechain if k && spread(1,4).look
    sleep 1/8.0
  }
end

live_loop :rev_percussion, sync: :metro do
  c1,c2,c3,c4 = *Drip[/cymbal/,[0,2,3,4]];
  with_fx :level, amp: 0.5 do
    with_fx :reverb, mix: 0.4, room: 0.5, mix_slide: 0.5 do |r_fx|
      8.times{
        tick
        if spread(1,16).look
          accent = spread(1,32).look ? 30 : 20
          #eek (ring :A1, :E2).tick(:in), accent, sus: 1, at: rand(1.0), mod: rand(1.0), mode: 2
        end

        ffx =(ing :hpf).look
        pp=(ing
          [c1] _ _ _   _ _ c1 _
          _ _ c1 _
          _ _ _ _      _ _ {c1=>ffx} _
          _ _ [c1] _
          ).look

        pxp=(ing
          [c1] _
          c1 _ _ _
          _ c1 _ _
          _ _ c1 _
          _ _ _ c1
          _ _ c1
          _ _ c1
          ).look
        pp=_
        if pp
          accent = pp.is_a?(Array) ? 1.0 : 0.8
          cutoff_bump = rand_i(5)
          fx = :none
          if pp && pp.is_a?(Hash)
            fx = pp.values[0]
            pp = pp.keys[0]
          end
          with_fx(fx){
            smp pp, cutoff: (line 110, 115, 6*4).look, attack: (line 0.02, 0.0,6*2).look, amp: accent*(line 1.0,0.9,6*8).look+10, start: 0.5, rate: -0.25*(knit 1,(6*4)-4, 0.85,4, 1,(6*4)-4, 0.75,4).look, pan: (ing 0.25 0.25 -0.25 0.25).look, cutoff: 110-cutoff_bump#, cutoff: (ramp 40, 120,256*3).tick(:fireandice)
          }
          if spread(1,6).look
            #smp MagicDust[:clack, [0,2,3,6]].tick(:insider), amp: 0.5*1, pan: (ring 0.25,-0.25).look(:inside)
          end
          if spread(3,7).look
            #smp Junk[/RedShaker/,18..22].tick(:i), amp: 0.2, pan: (ing 0.25,-0.25).tick(:ingit)
          end
        end

        sleep 1/8.0
        control r_fx, mix: rand(0.5)
      }
    end
  end
end

live_loop :sixteen, sync: :drums do
  tick
  c1 = CineElec[/one shots/,/pepper/]
  c1 = Tape[/_high/,49]
  s = spread(1,128).rot(-8*8 + 1).look
  if s
    #smp Words[/beaut/], start: 0.1, finish: 0.8, rate: 1.0, amp: 1.0
    with_fx (knit :none, 3*128, :echo, 128).look do
      smp c1, amp: 0.5, rate: (knit 1,2, 0.85,2, 1,2, 0.75,2).tick(:active)
    end
  end
  sleep 1/16.0
end

live_loop(:metro) do; sleep 1.0 end
