["experiments"].each{|f| require "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}"}

bar = 4.0

define :pat_to_ring do pat
 ring(*pat.split("\s"))
end

define :pat do |s, p, delta=0, *args|
 sync :s
 case p
   when  "x" #hit
    sleep(delta) if delta != 0
    sample *([s]+args)
   when  "r" #random
    sleep(delta) if delta != 0
    sample *([s]+args) if dice(6) > 3
  end
end

live_loop :beatz do
#sync :foo
density(2) do
 16.times{
 cue :s
 sleep (bar/16.0)
}
end
end

define :drum_loop do |name, state, sample, *args|
  live_loop name, auto_cue: false do  
     pat(sample.is_a?(SonicPi::Core::RingVector) ? sample.tick("#{name}sample".to_sym) : sample, state.tick(name), 
         delta=0,
         *[args[0].reduce({}){|a,(k,v)|
     v.is_a?(SonicPi::Core::RingVector) ? a[k]=v.tick("#{name}#{k}".to_sym) : a[k]=v
     a}])
  end
end

#Dance music generic
#with_fx :bitcrusher,sample_rate: 20000 do
with_fx :hpf, mix: 0.0 do
with_fx :level, amp: 1.0 do
with_fx :lpf, cutoff: 65, mix: 0.0 do
                            #1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8    1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8  
drum_loop(:kicker, (ring *%w{- - - r r - - - - - - - - - - -    - - - - - - - - - - - - - - - -}), Ether[/noise/i,11],  amp: 1.0, start: 0.0, rate: 1.0)
drum_loop(:kick,   (ring *%w{x - - - - - - - x - - - - - - -    x - - - - - - - x - - - - - - -}), Mountain[/kick/i,4], amp: (ring 1.5,1.0), start: (knit 0.0,2), rate: 1.0)
drum_loop(:snare,  (ring *%w{- - - - - - - - x - - - - - - -    - - - - - - - - x - - - - - - -}), Ambi[/clap/,13],  amp: 0.2, start: 0.0, rate: 1.0)
drum_loop(:clap,   (ring *%w{- - - - - - - - x - - - - - - -    - - - - - - - - x - - - x - - -}), Ether[/noise/i,5], amp: 2.0, start: 0.0, rate: 1.0)
drum_loop(:cchat,  (ring *%w{x - - x - - x - - x - - - - - x    - - x - - - x - x - x - - - x -    - - x - - - x - - - x - - - x -    x - - x - - x - - x - - - - - x}), Down[/hat/i,6], rate: (knit 1.01,3,1.0,2,-1.2,3), amp: 5.0*rrand(0.8,1.0), start: rrand(0.0,0.00001))
drum_loop(:ochat,  (ring *%w{- - - - x - - - - - - - x - - -    - - - - x - - - - - - - x - - -}), Ether[/hat/i,[4,19]].tick(:sample), amp: 0.2);  live_loop(:thing) do; with_fx :reverb, room: 0.7, mix: 0.3 do; 32.times{with_fx(:slicer, mix: 0.0,phase: 0.15, probability: 0.5){pat(Ether[/snare/i,12],  
                   (ring *%w{- - - - - - - - - - - - r - - -    - - - - - - - - - - - - - - - x}).tick(:a), delta=0.0025, amp: 1.0*(knit 0.5,24, 1.9,8).tick(:amp), start: 0.0, rate: (knit -0.8,16,-0.9,8, -1.0,8).tick(:rate))}};end;end;
drum_loop(:fast,   (ring *%w{- - - - - - x - x - x - - - - -    - - - - - - x - x - x - - - - - -}), Ether[/click/i,20], amp: 1.0, rate: -1.0)

end
end
end
#end

comment do
with_fx :level, amp: 1.0 do
#Minimal and detroit techno
#with_fx :lpf, cutoff: 73 do
         #1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8    1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8  
                                                                             live_loop(:kick)do; 32.times{pat(Ether[/kick/i,4],      
(ring *%w{x - - - x - - - x - - - x - - -    x - - - x - - - x - - - x - - -}).tick(:a), amp: 1.0, start: 0.0,)};end
                                                                               live_loop(:ride) do; 32.times{pat(Ether[/click/i,9],    
(ring *%w{x - - x - x - x - - x - - - x -    x - - x - x - x - - x - - - x -}).tick(:a), amp: 0.9)};end
                                                                               live_loop(:openhat)do; 32.times{pat(Ether[/hat/i,3],          
(ring *%w{x - - - x - - - x - - - x - - -    x - - - x - - - x - - - x - - -}).tick(:a), amp: 0.2)};end
                                                                               live_loop(:closedhat) do; 32.times{pat(Ether[/kick/i,1],  
(ring *%w{- - x x x - x x x - x x x - - -    - - x x x - x x x - x x x - - -}).tick(:a), amp: 1.0, start: 0.0, rate: 1.0)};end
                                                                               live_loop(:vinylcrack) do; 32.times{pat(Ether[/click/i,3],  
(ring *%w{c}).tick(:a), amp: 1.0, start: 0.0, rate: 1.0)};end
                                                                               live_loop(:conga) do; 32.times{pat(Ether[/click/i,2],  
(ring *%w{- - - x - - - - - - - x - - - -    - - - x - - - - - - - x - - - -}).tick(:a), amp: 1.0, start: 0.0, rate: 1.0)};end
                                                                               live_loop(:bongo) do; 32.times{pat(Ether[/click/i,1],  
(ring *%w{- - - - - - x - - - - - - - x -    - - - - - - x - - - - - - - x -}).tick(:a), amp: 1.0, start: 0.0, rate: 1.0)};end
                                                                               live_loop(:triangle) do; 32.times{pat(Ether[/click/i,8],  
(ring *%w{x x x x x x x x x x x x x x x x    x x x x x x x x x x x x x x x x }).tick(:a), amp: 0.2, start: 0.0, rate: 1.0)};end
end
end



#live_loop :kick  do; 16.times{pat(Ether[/kick/i,5],  (ring *%w{x x - - - - - - - - - - - - - -}).tick(:d), amp: 0*0.5)};end
#live_loop :kick2 do; 16.times{pat(Ether[/kick/i,4], bar, (ring *%w{- - x x - - - - - - - - - - - -}).tick(:e), amp: 0*0.9, rate: rrand(0.9,1.0))};end