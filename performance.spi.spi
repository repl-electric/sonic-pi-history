ROOT="/Users/josephwilk/Workspace/repl-electric/adventures-in-algorhythm/you_fall_into_your_screen/support"; load "#{ROOT}/midi.rb";load "#{ROOT}/init.rb";use_bpm 127*0.5

#camlogo logo: 1, off: 1
#null :e2
#bitsea_on :cs4
#invcol 0

#zero_on :a4


live_loop :playing_piano_through_a_keyhole, sync: :hit do;tick
  stop
  live_loop :fall_into_your_screen {stop}
  dcam3
  with_bpm 63.5 do #63.5
    score=(ing
      D4 CS4 _ A3 _ E4 _ A4 A4 A4 A4 A4
      D4 CS4 _ A3 _ B3 _ A4 A4 A4 Fs4 A4
      )
    note=score.look
    future_note=score.look(offset: 1)
    operator note
    callstack note,(ing 70 65 60).look, sus: 2
    shard 0.5
    #zero_x

    chd = find_chord future_note

    null note, 1, sus: 2

    sleep 1/2.0

    if spread(1,2).rot(1).look
      with_transpose -12 { zero chd[1],1,sus:12 }
      with_transpose 0   { zero chd[2],1,sus:12 }
      with_transpose -24 { zero chd[0],1,sus:12 }

    else

    end

    eek note, mode: 2, sus: 6 if spread(1,3).look

    if note == D4
    64.times{|n|
      sleep 0.125
      corrupt :e5, 10, sus: 0.125 if n % 8 == 0
      #sleep 0.125
      #corrupt (ing :e4 :e4 :e4 :e4).tick(:n), (ing 2 4 6 8).look(:n), sus: 4, mode: 0 if n % 16 == 0
      }
      stop
      end


    sleep 1/2.0
    sleep 1/4.0
  end
end



bitsea_cc motion: 0.37  #╟▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
bitsea_cc octave: 0.52  #╟▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
#bitsea_cc formant: 0.00 #╟▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
electric 20


alivecol 0.3


#focus
live_loop :fall_into_your_screen, sync: :unsyncable do; tick
  shard 0.3
  score=(ing
    [:b2  :d5 :fs3]        Zz
    [:fs2  :a4 :cs3]       Zz
    [:a2  :b4  :e4]
    [:d3  :fs5 :a3 :cs5]   Zz
    [:e2  :gs4 :b3]
    [:b2  :d5  :fs3 :cs4]  Zz
    [:fs4 :a4  :cs3]       Zz


    ).look
  score.each_tick(:in){|n|
    qbitsea n, 1.0*(ing 80 70 85 70).look(:in), mode: 0, cutoff: 1.0, sus: 2.5
  }

  pf=2.2
    i=(method :callstack)
  at{
    i.call(score[0], 60*pf, sus: 4)
    sleep 0.5
    i.call(score[1], 50*pf, sus: 4)
    i.call(score[2], 55*pf, sus: 4)
    i.call(score[3], 70*pf, sus: 2)
    i.call(score[4], 30*pf, sus: 8)
    i.call(score[5], 30*pf, sus: 8)
  }


  kick_machine K1

  cam4
  with_transpose -12 {cpu2 score[1], 60, sus: 2 }

  if score.length > 1
    exception root(score), atk: 0.6, sus: 2
  end

  sleep 1
  null root(score), atk: 0.6, sus: 1
  sleep 1
end
live_loop :by_the_light_of_the_terminal, sync: :unsyncable do
  stop
  with_fx :echo, mix: (ring 0.025+rand*0.1,0.055+rand*0.1,0.03,0.02,0.01).look, phase: (ring 1/4.0, 1/8.0).look do
    8.times{
      tick
      pp=(ing
        D1 _ D1 _ _ _
        D1 _ D1 _ _ _

        ).look
      smp_dust(pp)
      if pp
        dterrain (line 0.5, 2.2, 256).tick(:gpog)+rand*0.2
      end
      mt mt_pat.look.look, accent=(line 75, 127, 16*4).look, 120
      mt_cc morph: ((line 0.0, 1.1,16*16*2)+(line 1.1, 0.0, 16*16*2)).look
      s=strpat("[5]p5p5p5p 5p5p5[5]5p")
      mt s.look,accent=(line 85,127,64).look, 120


      sleep 1/8.0
    }
  end
end
live_loop :its_all_just_text_in_a_file, sync: :unsyncable do; tick
  stop
  kick_machine k=(ing
    [KT[1]] _ _ _  TS[8] _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _

    K1    _ _ _  TS[8] _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _
    ).map{|c| look % 4 == 0 ? c : c}.look, def: 8, accent: 1.5

  yes{
    if k && spread(1,64).rot(0).look
      bitsea :fs4, sus: 4.0
      cue :hit
    end
  }

  p=(ing
    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    [TS[49]] _ _ TS[12]    _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TS[7] _ _ _            _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TT[49] _ _ TS[12]      _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TS[7] _ _ _            _ _ _ _
    )

  p=p.look
  #p=_
  fx=:lpf
  accent = (ing 0.2 0.2 0.3 0.5).look
  attack = 0.0
  r = 1.0
  if p && p.is_a?(Array)
    p = p[0]
    accent=accent*1.5
  end
  if p
    with_swing(0.01) do
      with_fx(fx, phase: (ring 1/4.0,1/4.0,1/8.0).look){
        at{
          sleep 0.5
          viz :sea, height: 0.3
          viz :sea, noise: 10.0
          sleep 0.125
          dviz :sea, height: 0
          viz :sea, noise: 0.01
        }
        smp p, amp: 3*accent, rate: r, attack: attack
      }
    end
  end

  sleep 1/8.0
end
live_loop(:unsyncable) do; sleep 1.0 end
