["experiments", "log"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}.rb"}
set_volume! 1.0
_=nil

#@s = MountainLoop[/.*/,12]
#use_sample_bpm

define :note_to_sample do |n|
  note_info(n).midi_string.gsub("s", "#").gsub("Eb", "D#").gsub("Ab", "G#")
end

# F♯, G♯, A, B, C♯, D, and E


live_loop :arp do
  with_synth :prophet do
    n = (knit 
         chord(:Fs3, ['m'].choose),     64,
         chord(:Fs3, ['m+5'].choose),   32,
         chord(:Fs3, ['m7+5'].choose),  16,
         chord(:A3, :sus2, invert: 0), 32,
         chord_degree(6, :Fs3, :minor, 3,  invert: -3),16,
         chord_degree(7, :Fs3, :minor,  3, invert: -2),16,
         chord_degree(7, :Fs3, :minor,  3, invert: 0),32,

).tick(:c)

    #synth :hollow, note: chord(:fs4, 'M')[1]

    with_fx((knit :none,4, :reverb, 1, :none, 3).tick(:fx), decay: 1.0, phase: 1/4.0, room: 0.1) do
      c = (knit n[0],2, :r, 1,n[-1],2, :r,1, n[1],3).tick(:c) #.choose
      with_transpose(12) do
        play (ring c, _).tick , amp: 0.5, release: 0.2, attack: 0.1, attack_level: 0.5
      end
      play (n.to_a) , amp: 1, release: 0.2, attack: 0.1, attack_level: 0.5
      with_transpose(-24) do
        with_synth(:growl) do
          play (knit n[0],1, _,7).tick(:bass), decay: (1/2.0)*6, release: 1.0, attack: 0.1, amp: 0.6
        end
        with_transpose(-12) do
          with_synth(:dsaw) do
            play (ring n[0], _, _, _, _, _, _, _).look(:bass), decay: 0.1, release: 1.0, attack: 0.1, amp: 0.5, detune: 12
            if (ring n[0], _, _, _, _, _, _, _).look(:bass)
              with_fx(:slicer, phase: 1/8.0, smooth: 0.0, probability: 0.5) do
                sample Heat[/Low_Pad/i, /#{note_to_sample(n[0])[0..-2]}1/i], amp: 1.5
                            puts note_info(n[0]).midi_string.gsub("s", "#").gsub("Eb", "D#").gsub("Ab", "G#")[0..-2]
                            end
                              end


        end
          end
      end
    end
  end
  sleep 1/8.0
end



live_loop :drum do
  with_fx(:bitcrusher, bits: 10, sample_rate: 30000) do
  (ring 4, 4,4, 4,4).tick(:time).times{sync :arp}
  with_fx((knit :none,3, :echo,1).tick(:f)) do
    sample Ether[/kick/i, 9], rate: 1.55, amp: 2.0
  end
  (ring 4, 4,4, 4, 4).tick(:time).times{sync :arp}
  sample Ether[/snare/i, 4], rate: 1.55
                              end
end

                            

live_loop :hats do |idx|
  sync :arp
  m = [0.3,0.2,0.1, 0.4].choose
  4.times{
    if idx %8 != 2
      with_fx(:reverb, room: 0.3, mix: m) do
#        with_fx(:slicer, phase: 0.025, probability: 0.5, mix: m) do
          #sample Ether["clap",4], start: rrand(0.0,0.1),rate: 2.0
#        end
      end
    else
      #sample Ether["clap",4], amp: 1.0, rate: 0.95
    end
  sleep 1/4.0}
  idx+=1
end

# F♯, G♯, A, B, C♯, D, and E


live_loop :humand do
  with_fx(:bitcrusher, bits: 10, sample_rate: 30000) do
    with_fx(:flanger, pan: (Math.sin(vt*13)/1.5), phase: 2, wave: 4, invert_wave: 1, stereo_invert_wave: 1){
      octive = [2].choose
      with_fx(:bitcrusher, bits: 7) do
        #sample (ring Heat[/bells/i, /d##{octive}/i], Heat[/bells/i, /g##{octive}/i], Heat[/bells/i, /f##{octive}/i]).choose, decay: 16.0, cutoff: 80
                          end
                        }
  8.times{sync :arp}
  sample Sop[/f#/i,4]
  8.times{sync :arp}
  #sample Sop[/g#/i,4]
  8.times{sync :arp}
  #sample Sop[/d/i,4]
  end
end

live_loop :perc do
  4.times{sync :arp}
  #synth :blade, note: :fs5, cutoff: 70, release: 7.0
  4.times{sync :arp}
  #synth :blade, note: :gs4, cutoff: 70, release: 7.0
  4.times{sync :arp}
end