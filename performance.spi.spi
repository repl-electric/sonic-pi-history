load_support('piezoelectric_resonator'); use_bpm 127
live_loop(:unsyncable) do;  sleep 1.0;end

#defaultcolor
world time: 1

sea sphere: 0.0
sea circle: 0.0


stop
#rocks rot: -10.0
#init! true
at{
  sleep 0.5
  unity "/rockcircle/y", -0.125
  sleep 0.25
  unity "/rockcircle/y", 0.0
  }

create_cube 0.0
cam :cube

#cam :main

stop

create_light 1
  unity "/linecolor/h",2.0
  unity "/linecolor/s",2.0
  unity "/linecolor/b",1.0

#cam :cube
#zoomout
cam :main

stop
#scene 1
#init! true
#create_cube
zoomout
#create_sea
#create_cube
world time: 1.
#star life: 5
#overclock_on :E3
roots throttle: 1.0, freq: 0.5, amp: 0.2, drag: 3, target: cube
rocks throttle: 1





roots_chase radius: 1.0, amp: 0.5, freq: 0.2, drag: 3.0
roots chase: 0.02, target: :cube, drag: 3

#create_tree
#create_light
#create_sea
#cam :main

vortex y: 0.4, force: 0, throttle: 0.1
star life: 3.0, size: 0.56
star throttle: 1
shard 0.0
burst 0.02
##create_tree
#color :g1
sea wave: 0.5
#sea dir: 360
sea circle: 0.9
sea ripple: 0.0


#cam :main



#zoomout
#glitch_cc mode: 0, corode: 0.5
#glitch_cc mode: 0
#scene 1
#init!
#world time: 1.0
#create_cube
#create_sea
#cam :cube
#      unity "/cubecam/zoomout", 0.0
#      unity "/cubecam/zoomout", 1.0


#create_aura

#overclock_x

#overclock_cc motion: 0.25
#stop
#overclock_on :F3


# stop
# live_loop :oneshot, sync: :unsyncable do
#   tick
#   puts :A
#   overclock_on :A3
#   sleep 16
#   puts :E
#   overclock_on :E3
#   sleep 16
#   puts :F
#   overclock_on :F3
#   sleep 16
#   stop
# end

#cam :exit


#stop

#eject_cpu_core
#stop
#glitch_cc tubes: 0.0
fx reverb: 1.00, tube: 0.60
#stop

#overclock_on :e3

#overclock_on :F3
#overclock_x
#overclock_cc drive: 0.70
#overclock_cc amp: 0.50

#overclock_cc drive: 0.80
#overclock_cc amp: 0.85

#overclock_cc motion: 0.50

#flop_cc motion: 0.30,  drive: 0.00
#flip_cc motion: 0.50, drive: 0.00

#glitch_cc tubes: 0.50
#glitch_cc corode: 0.30

#glitch_cc tubes: 0.50
#glitch_cc corode: 1.00

#lovely
#flop_cc motion: 0.30,  drive: 0.90,  sat: 1.00
#flip_cc motion: 0.40, drive: 0.90, sat: 1.00


#flop_cc motion: 0.60,  drive: 0.90,  sat: 0.00
#flip_cc motion: 0.60, drive: 0.90, sat: 0.10

#overclock_on :G3
#overclock_cc motion: 0.25
#overclock_cc amp: 0.50

#flop_cc motion: 0.30,  drive: 0.00
#flip_cc motion: 0.50, drive: 0.00
glitch_cc tubes: 0.50
glitch_cc corode: 0.30
#create_cube
#cam :cube
shard 1.3
#zoomout
#create_sea
color rand
roots target: :cube, drag: 0.6

live_loop :wind, sync: :unsyncable do; tick
  stop
  s=(knit :A4, 128, _, 127, :A5,1).look
  qbitsea s, (line 127,50,256*4).look, sus: (knit 1/4.0,32,1/2.0,31, 1, 1).look if spread(7*1,11*4).look

  if spread(7*1,11*4).look
    if spread(7*1,11*4*8).look
      #qbitsea :A4, (line 127,100,256).look, sus: 2, hi: 0.85
    end
  end

  #qbitsea :A5
  #qbitsea :G3, ((line 20,40,128)+(line 40,20,128)).look, sus: (ing 1/4.0, 1/2.0, 1/4.0,).look if spread(3*4,8*4).look
  #qbitsea :E3, 50, sus: (ing 1/2.0, 1, 1,).look if spread(1*4,8*4).look
  sleep 1/8.0
end

# in_thread do
#   sync :ModularSynthsControlledByCode
#   midi_note_on :a4, 100, channel: 16, sus: 2
# end

live_loop :ModularSynthsControlledByCode, sync: :unsyncable do; tick
  #stop
  with_bpm 127*1 do
    #kalshot :G3, [5,10,15,20].choose, sus: 6 if spread(1,12).look
    if spread(4,8).look
      glitch_cc mode: (ing 0, 2, 3, 5,).look
    end
    if spread(8,8).look
      #dark :e3, 122
      if spread(3,8).look
        at{
          sleep 0.5
          #dark :e3, 110
        }
      end
    end

    glitch_cc corode: 1.0
    glitch :c3, 10.5*(ing 65, 60, 60, 60,).look
    at{
      sleep 0.5
      linecolor cube: rand*1.5
      sleep 0.5
      linecolor cube: rand*0.4
      }

    #vortex throttle: 0
    vortex force: (ing 500,  0,  100,  0,).look
    at{
      sleep 0.25
      glitch :c3, 2.1*(ing 120, 90, 100, 100,    100, 90, 90, 90,).look
    }
    glitch_cc corode: 0.8

    if spread(7,11).look
      if spread(1,4).look
        #flip :F3, 1*(ing 50, 60, 70, 110,).look, sus: 1.0#/2.0
        sleep 1/4.0
        #flop :E3, 1*(ing 50, 60, 70, 110,).look, sus: 2.0#/2.0
        #flop :D4, 2*(ing 50, 60, 70, 110,).look, sus: 1.0/8.0
        #glitch :ds3,2# if spread(1,4).look
        sleep 1/4.0
      else
#        midi :a4, 100, channel: 16, sus: 2
        #flop :d3, 2*(ing 50, 60, 70, 110,).look, sus: 1.0/2.0
        #flop :E4, 50, sus: 1.0 #KEEP
        sleep 1/4.0
        #glitch :as3,1# if spread(1,4).look
        sleep 1/4.0
        #glitch :as3,5# if spread(1,4).look
      end

      #flip (knit :A5, 4 ,:F5,4, :E5,8).look, (ing 80, 70, 60, 40,).look, sus: 4.0
      sleep 1/2.0
    else
      #glitch :gs3,3# if spread(1,4).look
      #flop :A3, 1*(ing 50, 60, 70, 110,).look, sus: 1.0/2.0 #lovely with c3
      sleep 1/2.0
      glitch :ds3, 127# if spread(1,4).look
      #flip :E3, 50, sus: 1.0 #KEEP
      #flip :g3, 50, sus: 4.0  #lovely riser
      sleep 1/2.0

      #flop_cc motion: 0.4

      #qbitsea :a4, 80, sus: 1
      flip :c3, 50, sus: 4.0
      #flop :A4, 15, sus: 4.0
      glitch :fs3,20# if spread(1,4).look

      at{
        sleep 1/2.0
        glitch :g3, 50# if spread(1,4).look
        #flop_cc motion: 0.50
        }
    end

    glitch_cc corode: (ine 0.2, 0.7, 128,).look
    #glitch (ing :c3, :a3,).look, 30 if spread(7,11).look

    #with_swing -0.1 {
      #flop :E4, 5.5*(ing 50, 60, 70, 110,).look, sus: 1.0/2.0
    #}
    #flop_cc motion: 0.45
    sleep 1/4.0
    #glitch :fs3, 40
    sleep 1/4.0

    #dark :e3, 110 if spread(1,2).look
    #flip  :f3, 15, sus: 2.0
    sleep 1/4.0
    #glitch :ds3, 127
    sleep 1/4.0

    #flop_cc motion: 0.48

    with_swing 0.1 {#((knit -0.1/2.0, 4, 0.1,4).look) {
      glitch :gs3, 40
      #flip :c3, 127-rand*10, sus: 1.0/4.0
      #flip (knit :f4,3,:D4,3,:C4,3).look, 127-rand*20, sus: 1.0#/2.0
    }

    sleep 1/2.0
    glitch :gs3, 80 if spread(1,8).look
    sleep 1/2.0
    glitch :gs3, 90 if spread(1,8).look

    if spread(3,8).look
      flop_cc motion: 0.3
      #flop :c4, 110-rand*15, sus: 2.0
    else
      flop_cc motion: 0.4
      #bitsea :d5, 127, sus: 1
      #flop :e3, 60-rand*10, sus: 1.0
    end

    #dark :cs3, 100

    sleep 1/2.0
    #dark :e3, 100
    #flop :c4, 127-rand*10, sus: 1.0/2.0
    glitch (ing :cs4, :cs4, :cs4, :d4,).look,127
    sleep 1/2.0
  end
end

live_loop :light, sync: :unsyncable do; tick
  scorez = (ing
    [[:A3, :C5, :E4], 8],
    [[:F4, :A6, :C5], 8],
    [[:C3, :E5, :G4], 8],
    [Zz, 4],

    [[:A3, :C5, :E4], 8],
    [[:E4, :G5, :B3], 8],
    [[:F4, :A6, :C5, :E5], 8],
    [[:C3, :E5, :G4], 8],
    [Zz, 8],

    [[:A3, :C5, :E4], 8],
    [[:F4, :A6, :C5], 8],
    [[:C3, :E5, :G4], 4],
    [Zz, 4],
    [[:A3, :C5, :E4], 4],
    [[:A3, :C5, :E4], 4],
    [[:E4, :G5, :B3], 4],
    [[:E4, :G5, :B3], 4],
    [[:G4, :B6, :D5, :F4], 8],
    [[:C4, :E5, :G4], 8],
    [Zz, 8],
    )
  score = scorez.look[0]
  sleeps = scorez.look[-1]

  at{
    #callstack score[-1],100, sus:1
    sleep 1/2.0
    #operator score[1],100, sus:1
  }

  #heat score[0], 0.5*(ing 10, 30, 50, 10,  10, 30, 40, 50,).look, sus: sleeps, pads: [0,1,2], sat: 0.0, drive: 0.00
  #deep root(score), 1, sus: (sleeps)*2, drive: 0.55, sat: 0.00
  sleep sleeps
end

live_loop :pacey, sync: :light do; tick
  stop
  #overclock_cc oct: (ing 0,   -12,  0,  12,).look
  sleep 0.5
  #tick
  #overclock_cc oct: (ing 0,   -12,  0,  19,).look
  #sleep 1
end
