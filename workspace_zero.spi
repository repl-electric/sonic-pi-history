["experiments.rb"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}"}
#                        \:o/ - nil.music.lights
#   π=-    π=-   π=-      █
#  π=-   π=-   π=-      .||.
_ = nil
bar = 1.0
use_bpm 60
set_volume! 1.0
@polyrhythm = [2,3]
load_snippets("~/.sonic-pi/snippets/")

live :begin, amp: 0.0 do
  sync :next
end

live :bits, amp: 1.0 do
    sync :next
    sample Mountain["Cracklin_01"], rate: 0.95, amp: 0.2
    sleep sample_duration(Mountain["Cracklin_01"], rate: 0.95)
end

live :indeterminism, amp: 0.5 do
  4.times{sync :next}
  
  uncomment do
  with_fx(:distortion, mix: 1.0, distort: 0.8) do |fx_r|
  with_synth(:hollow) do
    play deg_seq(%w{Fs4 1 3}).tick, decay: (knit bar*3, 3, bar*4,1).tick(:d), attack: 4, amp: 0.4, release: 1.0
  end

   sleep bar/8.0

      with_fx(:echo) do
      with_synth(:hollow) do
        play :As3, decay: 1.0, attack: 1.0, amp: 1.0, release: 1.0, decay: 1.0
      end
      end

      with_transpose(-12) do
      with_synth(:dark_ambience) do
        play deg_seq(%w{Fs4 1 3}).tick, decay: bar*3, attack: 4, amp: 0.3, release: 3.0
      end
      end

      with_transpose(-24) do
      with_synth(:dark_ambience) do
        play deg_seq(%w{Fs3 1}).tick, decay: bar, attack: 1, amp: 3.0, release: 1.0
      end
      end

     4.times{
      sleep bar/4.0
      control fx_r, distort: (ring 0.8, 0.8, 0.5, 0.0).tick(:distory)
    }
  end
  end

  4.times{sync :next}
  i_deter(deg_seq(%w{Fs4 1*7 _ 3*7 _}).tick,
          deg_seq(%w{Fs4 34}).stretch(4).tick)
end


live :next, amp: 1.0 do
  density(@polyrhythm.sort.first) do
#    sample Mountain["pebble",1], start: rrand(0.0,0.01), rate: -1.0, amp: 0.4
    sleep bar
end
end


live :drifting_through_code, amp: 4.0 do
  #sample Mountain[/impact/i, 1..3].tick(:kick), amp: 0.1
  1.times {sync :next}

  density(@polyrhythm.sort.last) do
  with_fx :reverb, room: 1.0, mix: 1.0, damp: 0.1 do |fx_r|
    with_fx((knit :none,7, :echo,(ring 7).tick(:d)).tick(:r2), mix: 0.8, phase: bar/2.0) do
notes = (knit chord(:As3,:m)[0..1], 12,
              chord(:As3,:m),       12,
              chord(:Cs3,:M, invert: 2).delete_at(1), 12,
              chord(:Cs3,:M, invert: 1), 12,
              chord(:Ds4,:m, invert: -2), 20,
              _, 4,
              chord_degree(7, :Fs3, :major, 3, invert: -2), 20,
              _, 4,
              chord(:Es3,'dim', invert: 1), 10,
              chord(:Es3,'dim', invert: 1), 10,
              _, 4,
              dice(6) > 6 ? chord(:Fs3,'sus4', invert: -1) : chord(:Fs3,'sus4', invert: 0), 20,
              _, 4,
              chord(:Fs3,:M, invert: -1), 20,
              _, 4,
              chord(:B4,:M, invert: -2)[0..2], 10,
              chord(:B4,:M, invert: -3)[0..2], 10,
              _, 4)

n = notes.tick(:asb)
#n = chord(:Fs3, 'sus4') + chord(:Fs3, "M") + chord(:As3, 'sus4') + chord(:As3, 'M')
#n = [chord_seq(*%w{Cs3 7 Fs3 M B3 M7}).ring.stretch(2).tick(:notes)]
#n =  chord_seq(*%w{Cs3 7 Fs3 M B3 M7}).ring
#n = knit(chord(:Fs3, 1),2, chord(:Fs2, 1),2, chord(:B3, 1),2).tick(:yum)

#puts "Harmony[#{(([]|n).map{|n| note_info(n).midi_string})}]"

if (n||[]).map{|a|note_info(a).midi_string} == (ring "Fs4", "B4", "Eb4")
  cue :bhit
end
#with_transpose(-12){with_synth(:sine){play (n ? n.sort[0] : n), cutoff: 60, pan: (Math.sin(vt*13)/1.5), amp: (ring 0.25).tick(:sdf), decay: 0.1 + rrand(0.1,0.2), release: 0.01}}
      i_int(n)
      #i_float(n)
      sleep bar
end;end;end;end

with_fx :distortion, mix: 0.1 do
with_fx(:pitch_shift, window_size: 4.0) do
live_loop :rumbling_loops, auto_cue: false do |idx|;with_fx :level, amp: 0.5 do
with_fx :reverb, mix: 0.2, damp: 0.3 do |fx_reverb|;
    3.times{sync :next}
comment do
    notes = (knit "Cs3",2, "Gs2",2, "As2",2,
                  "Cs3",2, "Gs2",2, "As2",2,
                  "B2",2,  "Gs2",2, "As2",2)
end

    notes = (knit chord(:As1,:m,    invert: 2)[0], 1,
                  :Cs2,                            2,
                  chord(:Ds2,:m,    invert: 0)[0], 2,
                  chord(:Es1, 'dim',invert: 0)[0], 2,
                  chord(:Es1,'dim', invert: 2)[0], 2,
                  :Fs1,                            2,
                  _,1,:Fs2,1,
                  chord(:B1,:M,     invert: -1)[0],3)

    note = notes.tick(:a)

    #note = (knit :Fs2,3, :Fs2,1).tick(:d)

    puts "BASS[#{note_info(note||0)}]"

    sleep bar/2.0


#    (knit 1,1).tick(:heat).times {with_fx(:reverb){sample Heat[/low_pad/i,note_to_sample(note,1)], amp: 1.0}}

    (ring 1,0).tick(:double).times do
      #with_fx(:echo, decay: 2.0){sample Frag[/coil/i, /f#/i].tick(:coil), amp: 0.5}
      #sample Frag[/coil/i,11], amp: 1.0
      with_synth [:pnoise, :prophet][0] do
      #play note, amp: 0.7, release: (knit bar,1).tick(:Bass), attack: 0.01, cutoff: 60
    end
    end

    1.times{sync :next}

    i_bass(note)

    6.times{
      control fx_reverb, damp: (rrand 0.0,1.0)
      sleep bar/8.0
    }
end;end
idx+=1
end;end;end