
def degreez_seq(*pattern_and_roots)
  puts pattern_and_roots
  pattern_and_roots = pattern_and_roots.reduce([]){|accu, id| 
  if(!accu[-1].kind_of?(Symbol) && id.kind_of?(Integer))
    accu[0..-2] << "#{accu[-1]}#{id}"
  else
    accu << id
  end}
 patterns = pattern_and_roots.select{|a| /^[\d]+$/ =~ a.to_s } 
 roots   = pattern_and_roots.select{|a| /^[\d]+$/ !~ a.to_s}

puts patterns
puts roots
 notes = patterns.each_with_index.map do |pattern, idx|
  root = roots[idx]
  if(root[0] == ":")
    root = root[1..-1]
  end
  s = /[[:upper:]]/.match(root.to_s[0]) ? :major : :minor
  pattern.to_s.split("").map{|d| degree(d.to_i, root, s)}
 end.flat_map{|x| x}
 (ring *notes)
end


puts %w[:A2 1     45   :A2 7 :A3 11      :A3 1     45]
degreez_seq(*%w[:A2 1     45   :A2 7 :A3 11      :A3 1     45])