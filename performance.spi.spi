#camlogo logo: 1.0, crazy: 1.0, off: 1.0
#null :A2
#bitsea_on :cs4
bitsea_cc motion: 0.09  #╟▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
bitsea_cc octave: 0.50  #╟▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
#bitsea_cc formant: 0.50 #╟▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╢
#invcol 0.0
electric

#focus
#zero_x
live_loop :playing_piano_through_a_keyhole, sync: :hit do;tick
  dcam3
  dviz :breath, 0.0

  with_bpm 45.125 do #63.5
    score=(ing
      D3 Cs4 _ A3 _ E4 _ A4 A4 A4 A4 A4
      )
    note=score.look
    future_note=score.look(offset: 1)
    #operator note
    #callstack note,(ing 70 65 60).look, sus: 2

    sleep 1/2.0
    sleep 1/2.0
    sleep 1/4.0
  end
end


#zero_on :a4
zero_cc pulse: 0.00
zero_cc more:  0.00
zero_cc noise: 0.00
zero_cc wet:   0.80


live_loop :fall_into_your_screen, sync: :unsyncable do; tick
stop
  rev :e4,10 if spread(1,3).look
  score=(ing
    [:d3 :d5  :fs3] #Zz
    [:fs3 :a4 :cs4] #Zz
    ).look
#  callstack root(score), 40
  score.each_tick(:in){|n|
    bitsea n, 1.0*(ing 80 70 85 70).look(:in), mode: 0, cutoff: 1.0, sus: 2.5
  }

  exception root(score), sus: 1.5
  corrupt :A2
  alive rotate: 1.0
  shard 0.1
  sleep 1
  null root(score), 80
#  terrain 0.9

  alive rotate: 0.0
  shard 0.0
  #verb_slice Drip[/effect/].look if spread(1,3).look
  sleep 1
end

live_loop :by_the_light_of_the_terminal, sync: :unsyncable do
stop
  with_fx :echo, mix: (ring 0.025+rand*0.1,0.055+rand*0.1,0.03,0.02,0.01).look, phase: (ring 1/4.0, 1/8.0).look do
    8.times{
      tick
      pp=(ing
        _ _ _ _    _ _ _ _    _ _ _ _   _ _ _ _
        _ _ _ _    _ _ D1 _    _ _ _ _   _ _ _ _

        ).look
      terrain 0.9 if pp
      #smp_dust(pp)
      mt mt_pat.look.look, accent=(line 75, 100, 16*4).look, 100
      mt_cc morph: ((line 0.0, 1.1,16*16*2)+(line 1.1, 0.0, 16*16*2)).look
      s=(ing
        2 _ _ _  5 _ _ _    5 _ _ _      _ _ _ _
        5 _ _ _   _ _ _ _   5 _ [2] 3    _ [5] 5 5
        ).look
      mt s, accent=(line 75, 85, 16*4).look, 100
      s=strpat("[5]p5p5p5p 5p5p5[5]5p")
#      mt s.look,accent=(line 85,127,64).look, 120


      sleep 1/8.0
    }
  end
end
#mt_cc morph: 1


live_loop :its_all_just_text_in_a_file, sync: :unsyncable do; tick
stop
  kick_machine k=(ing
    [KT[1]] _ _ _   %e{TS[8]} _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %l{TC[6]} _   _ _ _ _

    K1 _ _ _   %e{TS[8]} _ _ _  K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   %l{TC[6]} _ _ _      K3 _ _ _   _ _ _ _
    K1    _ _ _   _ _ _ _      K3 _ %e{TC[6]} _   _ _ _ _

    ).map{|c| look % 8 == 0 ? c : c}.look, def: 8, accent: 1

  yes{
    if k && spread(1,64).rot(0).look
      cue :hit
      bitsea :fs4, sus: 4.0
      stop
    end
  }


  p=(ing
    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    [TS[49]] _ _ TS[12]    _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TS[7] _ _ _            _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TT[49] _ _ TS[12]      _ _ _ _

    _ _ _ _                _ _ _ _
    _ _ _ _                _ _ _ _
    TS[7] _ _ _            _ _ _ _
    )

  p=p.look
  #p=_
  fx=:lpf
  accent = (ing 0.2 0.2 0.3 0.5).look
  attack = 0.0
  r = 1.0
  if p && p.is_a?(Array)
    p = p[0]
    accent=accent*1.5
  end
  if p
    with_swing(0.01) do
      with_fx(fx, phase: (ring 1/4.0,1/4.0,1/8.0).look){
        at{
          sleep 0.5
          viz :sea, height: 0.3
          viz :sea, noise: 10.0
          sleep 0.125
          dviz :sea, height: 0
          viz :sea, noise: 0.01
        }
        smp p, amp: 3*accent, rate: r, attack: attack
      }
    end
  end


  sleep 1/8.0
end

live_loop(:unsyncable) do; sleep 1.0 end
