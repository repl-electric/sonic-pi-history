["shaderview","experiments", "log"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}.rb"}



live_loop :dark do
  sleep 8
  with_synth :dark_ambience do
    #  play (ring :Fs1, :As1).tick, decay: 8.0, detune1: 12, amp: 4.0, attack: 1.0, cutoff: 60
  end
end

live_loop :drums do
  with_fx(:echo, phase: 0.5, decay: 2.0) do
    sample Mountain[/subkick/,0], cutoff: 130
  end

  shader(:decay, :iBeat, rand+4.0, 0.001)
  shader(:decay, :iKick, 10.0)
  #shader(:decay, :iWave, 0.5, 0.003)
  sleep 1
  with_fx(:reverb) do
    # sample Frag[/snap/,0], cutoff: 90
    #shader(:decay, :iOffBeat, 1.0)
  end

  sleep 1
end

live_loop :what_are_we_doing_here do
  sleep 8
  with_synth :dark_sea_horn do
    #shader(:decay,  :iWobble, 1.0)
    #play (ring :Fs3, :As3, :Ds3).tick, decay: 8.0
  end
end
_=nil
live_loop :hats do
  sync :apeg
  mix = [0.1,0.2,0.3,0.4,0.5].choose

  if (spread 1, 4).tick(:d)
    #sample (ring Fraz[/kick/,0], Fraz[/kick/,0]).tick(:s),  amp: 2.5
    #shader("decaying-uniform", "iBeat", 1.0, 0.001)
  end

  with_fx(:reverb, mix: mix, room: 0.8){
    shader("decaying-uniform", "iHat", 0.1)
    sample Frag[/hat/i, Range.new(0,(ring 2,4).tick(:r))].tick(:hats), amp: 1.0-rand*0.5, cutoff: (knit 105,3,115,3).tick(:hats) if (spread 7, 11).tick(:spread)
    #  sample Dust[/banton/,[0,1]].tick(:b), amp: (knit 1,3,0,1).tick(:k), cutoff: (knit 80,3,100,3).tick(:c)
  }
end
live_loop :apeg do
  use_synth :saw
  root = (knit :Fs3, 16, :As3, 16, :Ds3, 16,
          :Fs3, 16, :As3, 16, :Gs3, 16,
          :Fs3, 16, :As3, 16, :Es3, 16,
          :Fs3, 16, :As3, 16, :Cs3, 16
          ).tick(:notes)
  with_transpose(-24){
    with_synth(:dsaw){play (knit root,1, _, 15).tick(:bass), release: 1.5, decay: 2.5, amp: 1.5, cutoff: 60}
    with_synth(:prophet){play (knit root,1, _, 15).look(:bass), release: 1.5, decay: 2.0, amp: 1.2, cutoff: 60}

    if (knit root,1, _, 15).look(:bass)
      #      sample Fraz[/coil/,4], amp: 1, cutoff: (ring 70,80).tick(:cu)
    end
  }
  sleep 0.25 * 1
end

with_fx(:lpf, cutoff: 120) do
  live_loop :highlight do
    16.times{sync :apeg}
    with_transpose(0) do
      i_deter(deg_seq(%w{Fs4 1*3 3*3  5*3   1*3  3*3   5*3}).tick,
              deg_seq(%w{Fs4 3   5    6     3    5     2 }).stretch(3).tick, amp: 0.8*1,
              damp_time: 0.25*4.0)
    end
  end
end

with_fx(:reverb, room: 1.0, mix: 1.0){ |r_fx|
  live_loop :chorus do
    notes = (knit
             chord_degree(1, :fs3, :major)[1..-1], 8,
             chord_degree(3, :fs3, :major)[1..-1], 8,
             chord(:Ds3, "m")[1..-1], 8,
             chord(:Fs3, 'sus4')[1..-1], 8,
             chord(:As3, 'm+5')[1..-1], 8,
             chord(:Ds3, "m7")[1..-1], 8,   #D F A C
             chord(:Fs3, 'sus4')[1..-1], 8,
             chord(:As3, 'm+5')[1..-1], 8,
             chord(:Cs3, :M)[1..-1], 4,
             chord(:Cs3, :maj9)[1..-1],4)

    1.times{sleep 0.25}
    with_synth(:hoover)do
      play notes.tick(:h)[0], amp: 0.00
    end

    1.times{sleep 0.25}
    with_synth(:hollow){
      4.times{control r_fx, dry: rrand(0.0,1.0) ; sleep 0.25/4.0}
      play notes.look(:h), amp: (knit 4.0,4, 0.0,4).tick(:amp), release: 0.5, decay: 1.0, cutoff: (ring 80,100,110,130).tick(:cut)*0.1, res: (ring 0.98,0.99).tick(:xcut)
      puts note_inspect(notes.look(:h), "CHORD")


      if(notes.look(:h) == chord(:Ds3, "m7")[1..-1])
        cue :lovely
        #sample (knit Frag[/coils/, /F#/,0] ,1,   _,7).tick(:s)
        with_fx(:flanger){
          sample (knit "/Users/josephwilk/Dropbox/repl-electric/samples/Bowed Notes/G#_HarmBow_01_SP.wav" ,1,   _,7,
                  "/Users/josephwilk/Dropbox/repl-electric/samples/Bowed Notes/D#_BowedGuitarNote_01_SP.wav",1,_,7,
                  Mountain[/G#_BowedHarmSoft/,0],1,_,7
                  ).tick(:s), cutoff: 80, amp: 0.15*1
        }
        #   sample (knit Sop[/F#4/,/down/,1] ,1,   _,7).tick(:s)
      end
    }
  end
}

shader(:uniform, :iInvert, 0.0)
shader(:uniform,  :iWobble, 0.0)
#shader("uniform", :iMesh, 0.0)
shader("uniform", :iCells, 0.0)
shader("uniform", :iStars, 0.0)
shader("uniform", :iStarLight, 0.0)
shader(:uniform, :iSpaceMotion, 0.01)
shader(:uniform, :iDrop, 1.0)
shader(:uniform, :iCellCount, 2.0)
shader(:uniform, :iCellMotion, 1.0)

#shader("uniform", :iBeat, 3.05)
#shader("uniform", :iBeat, 0.0)