["experiments.rb"].each{|f| load "/Users/josephwilk/Workspace/repl-electric/live-coding-space/lib/#{f}"}
_ = nil
bar = 1.0
use_bpm 60
set_volume! 3.0
@polyrhythm = [2,3]
load_snippets("~/.sonic-pi/snippets/")

live :next, amp: 0.5 do
  density(@polyrhythm.sort.first) do
    sample Mountain["pebble",0], start: rrand(0.0,0.01), rate: -1.0, amp: 0.4
    sleep bar
  end
end

live :indeterminism, amp: 2.0 do
  4.times{sync :next}
 
  uncomment do
  with_fx(:distortion, mix: 1.0, distort: 0.8) do |fx_r|
  with_synth(:hollow) do
  play deg_seq(%w{Fs4 1 3}).tick, decay: bar*2, attack: 4, amp: 0.2, release: 1.0
  end
  4.times{
    sleep bar/4.0
    control fx_r, distort: (ring 0.8, 0.8, 0.5, 0.0).tick(:distory)
  }
  end
  end

  4.times{sync :next}
  i_deter(deg_seq(%w{Fs4 1*7 _ 3*7 _}).tick,
          deg_seq(%w{Fs4 34 -5 4}).stretch(4).tick)
end


live_loop :melody do
sync :next 

4.times{
with_transpose(-12) do
with_synth(:hollow) do
    i_nil (ring degree(1, :Fs4, :major),
                degree(3, :Fs4, :major),
                (dice(6) > 3 ? degree(4, :Fs4, :major) : degree(5, :Fs4, :major)),
                 degree(6, :Fs4, :major),

                degree(1, :Fs4, :major),
                degree(3, :Fs4, :major),
                (dice(6) > 3 ? degree(4, :Fs4, :major) : degree(5, :Fs4, :major)),
                 degree(6, :Fs4, :major),
#                degree(1, :Fs4, :major),
                 #degree(7, :Fs3, :major)
).tick, release: 8.0
end
end
sleep bar/2.0
}

end


live :recursion, amp: 0.0 do
  9.times{sync :bhit}
end

with_fx :distortion, mix: 0.1 do
with_fx(:pitch_shift, window_size: 4.0) do
live_loop :rumbling_loops, auto_cue: false do |idx|;with_fx :level, amp: 0.5 do
with_fx :reverb, mix: 0.2, damp: 0.3 do |fx_reverb|;
    3.times{sync :next}
comment do
    notes = (knit "Cs3",2, "Gs2",2, "As2",2,
                  "Cs3",2, "Gs2",2, "As2",2,
                  "B2",2,  "Gs2",2, "As2",2)
end

    notes = (knit chord(:As1,:m,    invert: 2)[0], 1,
                  :Cs2,                            2,
                  chord(:Ds2,:m,    invert: 0)[0], 2,
                  chord(:Es1, 'dim',invert: 0)[0], 2,
                  chord(:Es1,'dim', invert: 2)[0], 2,
                  :Fs1,                            2,
                  _,1,:Fs2,1,
                  chord(:B1,:M,     invert: -1)[0],3)

    note = notes.tick(:a)

    note = (ring :B1, :Cs2, :Ds2,
                  :B1, :Cs2, :Ds2,
                  :B1, :Cs2, :Fs2).tick(:a)


    puts "BASS[#{note_info(note||0)}]"

    sleep bar/2.0
    #(ring 1,0).tick(:ti).times{with_fx(:pitch_shift, mix: 1.0, pitch: 0.025){with_fx(:slicer, mix: 0.5, phase: 0.025, probability: 0.5){sample Heat[/stacked_bells/i,note_to_sample(notes.reverse.look(:a),1)], amp: 1.5, attack: 0.2}}}
    #(knit 1,1).tick(:heat).times {with_fx(:reverb){sample Heat[/low_pad/i,note_to_sample(note,1)], amp: 1.0}}

    (ring 1,0).tick(:double).times do
      #with_fx(:echo, decay: 2.0){sample Frag[/coil/i, /f#/i].tick(:coil), amp: 0.5}
      #sample Frag[/coil/i,11], amp: 1.0
      with_synth [:pnoise, :prophet][0] do
      play note, amp: 0.7, release: (knit bar,1).tick(:Bass), attack: 0.01, cutoff: 60
    end
    end

    1.times{sync :next}

    i_bass(note)

    6.times{
      control fx_reverb, damp: (rrand 0.0,1.0)
      sleep bar/8.0
    }
end;end
idx+=1
end;end;end

live :missing_semi_colon, amp: 0.0 do
    2.times{sync :start}
    sample (knit Mountain["microperc_06"],3,Mountain["microperc_07"],1).tick(:s)
end