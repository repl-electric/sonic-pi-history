
_ = nil
      n = (knit
        (stretch invert_chord(chord(:As3,:m)[0..1], 0),1), 1,        #3
        (stretch chord(:As3,:m, invert: 0),1), 1,                    #3
#HIT 1 3 FS3-AS4
        (stretch invert_chord(chord(:Cs3,:M)[1..-1], 1),1), 1,       #5
        (stretch chord(:Cs3,:M, invert: 1),1), 1,                    #5
#HIT FS3-AS4
        (stretch chord(:Ds4,:m, invert: -2),1), 1,                   #6
         _, 4,
#HIT FS4-B4
        (stretch chord_degree(7, :Fs3, :major, 3, invert: -2),1), 1, #7
         _, 4,
#HIT FS4-B4
        (stretch chord(:Es3,'dim', invert: 1),1), 10,                 #7
        (stretch chord(:Es3,'dim', invert: 1),1), 10,                 #7
         _, 4,
#HIT AS4-CS4
        (stretch dice(6) > 3 ? chord(:Fs3,'sus4', invert: -1) : chord(:Fs3,'sus4', invert: 0),1), 20,          #1
         _, 4,
#HIT AS4-CS4
        (stretch chord(:Fs4,:M, invert: -1),1), 20,                   #1
         _, 4,
#HIT AS4-B4
        (stretch chord(:B4,:M, invert: -2)[0..2],1), 10,              #4
        (stretch chord(:B4,:M, invert: -3)[0..2],1), 10,              #4
         _,4,
#HIT AS4-B4
)

puts n




puts (knit chord(:As3,:m)[0..1], 1,
           chord(:As3,:m),       1,
           chord(:Cs3,:M, invert: 2).delete_at(1), 1,
           chord(:Cs3,:M, invert: 1), 1,
           chord(:Ds4,:m, invert: -2), 1,  
           _, 4,
           chord_degree(7, :Fs3, :major, 3, invert: -2), 1,
           _, 4,
          chord(:Es3,'dim', invert: 1), 1,
          chord(:Es3,'dim', invert: 1), 1 ,
           _, 4,
         dice(6) > 3 ? chord(:Fs3,'sus4', invert: -1) : chord(:Fs3,'sus4', invert: 0), 1,
         _, 4,
         chord(:Fs4,:M, invert: -1), 1,
         _, 4,
        chord(:B4,:M, invert: -2)[0..2],
        chord(:B4,:M, invert: -3)[0..2]
         _, 4,

)